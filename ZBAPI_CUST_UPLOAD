*&---------------------------------------------------------------------*
*& Report ZBAPI_CUST_UPLOAD
*&---------------------------------------------------------------------*
*& Created by Sanket Bhosale | EY | 
*&---------------------------------------------------------------------*
REPORT zbapi_cust_upload.

TABLES: but000,kna1,knb1,lfa1,pa0006,pa0002.
TYPES: BEGIN OF ty_file_bp,
         partn_grp        TYPE bapibus1006_head-partn_grp, " Business Partner Grouping
         title            TYPE ad_titletx,                 " Title text
         name1            TYPE kna1-name1, "bu_nameor1,                 " Name 1 of organization
         name2            TYPE bu_nameor2,                 " Name 2 of organization
         name3            TYPE bu_nameor3,                 " Name 3 of organization
         name4            TYPE kna1-name4,                 " Name 4 of organization
         sterm1           TYPE sortl,                      "Search Term 1
         sterm2           TYPE bu_sort2,                   "Search Term 2
         str_suppl1       TYPE ad_strspp1,                 "Street 2
         str_suppl2       TYPE ad_strspp2,                 "Street 3
         street           TYPE ad_street,                  " Street
         str_suppl3       TYPE ad_strspp3,                 "Street 4
         remark           TYPE ad_remark1,                 "Address notes
*         response         TYPE char20,                     "Responsibility Center
         postl_cod1       TYPE ad_pstcd1,                  "City Postal Code
         city             TYPE ad_city1,                   "City
         country          TYPE land1,                      "Country
         region           TYPE regio,                      "Region
         langu            TYPE spras,                      "Language
         tel_number       TYPE ad_tlnmbr,                  "Telephone no.: dialling code+number
         mob_number       TYPE ad_tlnmbr,                  "Telephone no.: dialling code+number
         fax              TYPE ad_fxnmbr1,                 "FAX
         smtp_addr        TYPE ad_smtpadr,                 "E-Mail Address
         taxtype(4),   "Tax Type
         taxnumber(20),   "Tax number
         ktokd            TYPE ktokd,
         pan              TYPE j_1ipanno , "customer pAN nO
         bukrs            TYPE lfb1-bukrs, " Company Code
         akont            TYPE akont,      "Recon Account
         zterm            TYPE knvv-zterm, "Terms of payment key
         vkorg            TYPE knvv-vkorg, "Sales Organization
         vtweg            TYPE knvv-vtweg, "Distrbution Channel
         spart            TYPE knvv-spart, "Division
         bzirk            TYPE knvv-bzirk, "Sales District
         kdgrp            TYPE knvv-kdgrp, "Customer Group
         vkbur            TYPE knvv-vkbur, "Sales office
         vkgrp            TYPE knvv-vkgrp, "Sales group
         waers            TYPE knvv-waers, "Currency New
         kurst            TYPE kurst_curr, "Exchange Rate Type
         kalks            TYPE knvv-kalks, "Customer Pricing Procedure
         versg            TYPE knvv-versg, "Customer Statistic Group
         lprio            TYPE lprio,      "Delivery priority
         vsbed            TYPE knvv-vsbed, "Shipping Conditions
         inco1            TYPE knvv-inco1, "inco1
         inco2            TYPE knvv-inco2, "inco2
         ktgrd            TYPE knvv-ktgrd, "Account Assignment Group
         jtx1_tax         TYPE taxkm,             " JTX1 Tax
         jocg_tax         TYPE taxkm,             " JOCG Tax
         josg_tax         TYPE taxkm,             " JOSG Tax
         joig_tax         TYPE taxkm,             " JOIG Tax
         joug_tax         TYPE taxkm,             " JOUG Tax
         jcos_tax         TYPE taxkm,             " JCOS Tax
         jtc1_tax         TYPE taxkm,             " JTC1 Tax
         utxj_tax         TYPE taxkm,             " UTXJ Tax
         utx2_tax         TYPE taxkm,             " UTX2 Tax
         utx3_tax         TYPE taxkm,             " UTX3 Tax
         credit_seg       TYPE ukm_credit_sgmnt,  "Credit Segment
         credit_limit     TYPE ukm_credit_limit,  "Credit Limit
         kukla            TYPE kna1-kukla,        "Customer Classification
         extaddressnumber TYPE bu_adext,          " External address number
         niels            TYPE niels,             " Nielsen ID
       END OF ty_file_bp.

DATA: itab1 LIKE alsmex_tabline OCCURS 0 WITH HEADER LINE.
DATA:ean7 TYPE mara-ean11.
DATA: gt_data TYPE TABLE  OF ty_file_bp,
      gs_data TYPE  ty_file_bp,
      it_data TYPE TABLE OF ty_file_bp,
      wa_data TYPE ty_file_bp.
FIELD-SYMBOLS : <fs_xl>  TYPE alsmex_tabline,
                <fs_tbl> TYPE any.
DATA : gv_index          TYPE sy-index.
DATA:  b_part TYPE string.

DATA businesspartnerextern TYPE bapibus1006_head. " Business Partner Number
DATA partnercategory TYPE bapibus1006_head-partn_cat. " Business Partner Category
DATA partnergroup TYPE bapibus1006_head-partn_grp. " Business Partner Grouping
DATA centraldata TYPE bapibus1006_central. " General BP Data, Independent of Business Partner Category
DATA centraldataperson TYPE bapibus1006_central_person. " SAP BP: BAPI Structure for Personal Data
DATA centraldataorganization TYPE bapibus1006_central_organ. " SAP BP: BAPI Structure for Organization Data
DATA addressdata TYPE bapibus1006_address. " SAP BP: BAPI Structure for Address Data
DATA businesspartner TYPE bapibus1006_head-bpartner. " Business Partner Number
DATA headoffice TYPE bapibus1006_head-bpartner. " Business Partner Number
DATA v_exist TYPE char1.
DATA lv_flag1 TYPE char1.
DATA it_telephondata TYPE STANDARD TABLE OF bapiadtel. " BAPI Structure for Telephone Numbers (Bus. Address Services)
DATA wa_telephondata TYPE bapiadtel. " BAPI Structure for Telephone Numbers (Bus. Address Services)
DATA wa_fax TYPE cvis_ei_fax_str.
DATA it_fax TYPE cvis_ei_fax_t.
DATA wa_fax_str TYPE cvis_ei_cvi_fax.
DATA it_maildata TYPE STANDARD TABLE OF bapiadsmtp. " BAPI Structure for E-Mail Addresses (Bus. Address Services)
DATA wa_maildata TYPE bapiadsmtp. " BAPI Structure for E-Mail Addresses (Bus. Address Services)
DATA it_remark TYPE STANDARD TABLE OF bapiad_rem. " BAPI structure for address comments
DATA wa_remark TYPE bapiad_rem. " BAPI structure for address comments
DATA it_remarkx TYPE STANDARD TABLE OF bapiad_rex. " Change BAPI Reference Structure for Structure BAPIAD_REM
DATA wa_remarkx TYPE bapiad_rex. " Change BAPI Reference Structure for Structure BAPIAD_REM
DATA it_fax_tab TYPE STANDARD TABLE OF bapiadfax.
DATA wa_fax_tab TYPE bapiadfax.

DATA return TYPE STANDARD TABLE OF bapiret2. " Return Parameter
************************
DATA : it_raw    TYPE truxs_t_text_data.
DATA: it_file TYPE TABLE OF ty_file_bp.
DATA: wa_file TYPE ty_file_bp.
DATA: t_fcat TYPE slis_t_fieldcat_alv.
DATA: w_fcat TYPE slis_fieldcat_alv.
DATA: s_layout TYPE slis_layout_alv.
DATA : lwa_return TYPE bapiret2.

DATA : lt_remarks TYPE STANDARD TABLE OF cvis_ei_rem,
       ls_remarks TYPE cvis_ei_rem.

TYPES : BEGIN OF zbp_upload,
          serial      TYPE char100,
          msgtyp      TYPE char10,
          msgnr       TYPE num10,
          bu_partner  TYPE bapibus1006_head-bpartner,
          msg         TYPE char100,
          bpname      TYPE name1,
          vendor      TYPE lifnr,
          sortl       TYPE sortl,
          customer    TYPE kunnr,
          bu_partnerx TYPE c,
          uzeit       TYPE sy-uzeit,
          erdat       TYPE sy-datum,
          uname       TYPE sy-uname,
        END OF zbp_upload.
DATA: t_log    TYPE TABLE OF zbp_upload, "TY_LOG,
      w_log    TYPE zbp_upload,
      it_kna1n TYPE TABLE OF kna1,
      wa_kna1n TYPE kna1,
      it_knb1n TYPE TABLE OF knb1,
      wa_knb1n TYPE knb1.
DATA:it_but000 TYPE TABLE OF but000,
     wa_but000 TYPE but000.
DATA: it_cvi_cust_link TYPE TABLE OF cvi_cust_link,
      wa_cvi_cust_link TYPE cvi_cust_link.
TYPES : BEGIN OF lty_kna1,
          kunnr TYPE kunnr,
          name1 TYPE name1,
          sortl TYPE sortl,
          name4 TYPE name1,
        END OF lty_kna1.

DATA : lt_kna1  TYPE TABLE OF lty_kna1,
       lwa_kna1 TYPE lty_kna1.

DATA : r4 TYPE c,
       r5 TYPE c.
DATA : gwa_knvi TYPE knvi.

DATA: BEGIN OF bdcdata OCCURS 0.
        INCLUDE STRUCTURE bdcdata.
DATA: END OF bdcdata.
DATA : lv_flag TYPE c.
DATA lv_string TYPE string.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE TEXT-101.
  PARAMETERS: p_infile LIKE rlgrap-filename  ,        "File Path
              v_mode   TYPE ctu_params-dismode DEFAULT 'A' NO-DISPLAY.
SELECTION-SCREEN END OF BLOCK b1.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_infile.
  CALL FUNCTION 'F4_FILENAME'
    EXPORTING
      program_name  = syst-cprog
      dynpro_number = syst-dynnr
      field_name    = 'p_file'
    IMPORTING
      file_name     = p_infile.

START-OF-SELECTION.

  PERFORM upload_xl.
  PERFORM fill_fcat_bplog.
  PERFORM create_bp_add_role.
  PERFORM display_log_bp.
*&---------------------------------------------------------------------*
*& Form UPLOAD_XL
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM upload_xl .

  DATA lt_raw_data  TYPE truxs_t_text_data.

  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = p_infile
      i_begin_col             = '1'
      i_begin_row             = '2' "Do not require
      i_end_col               = '100'
      i_end_row               = '10000'
    TABLES
      intern                  = itab1
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
  IF sy-subrc <> 0.
    MESSAGE e010(zz) WITH TEXT-001. "Problem uploading
  ENDIF.

  LOOP AT itab1 ASSIGNING <fs_xl>.
    CLEAR:gv_index.
    MOVE <fs_xl>-col TO gv_index.
    ASSIGN COMPONENT gv_index OF STRUCTURE gs_data TO <fs_tbl>.
    MOVE <fs_xl>-value TO <fs_tbl>.
    AT END OF row.
      APPEND gs_data TO gt_data.
      CLEAR: gs_data.
    ENDAT.
  ENDLOOP.
  it_file[] = gt_data[].
ENDFORM.
*&---------------------------------------------------------------------*
*& Form FILL_FCAT_BPLOG
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fill_fcat_bplog .
  s_layout-colwidth_optimize = 'X'.
  s_layout-zebra = 'X'.

  w_fcat-fieldname = 'SERIAL'.
  w_fcat-seltext_l = 'Serial'.
  w_fcat-tabname = 'T_LOG'.
  APPEND w_fcat TO t_fcat.
  CLEAR w_fcat.

  w_fcat-fieldname = 'MSGTYP'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'Message Type'.
  APPEND w_fcat TO t_fcat.
  CLEAR w_fcat.

  w_fcat-fieldname = 'MSGNR'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'Message No'.
  APPEND w_fcat TO t_fcat.
  CLEAR w_fcat.

  w_fcat-fieldname = 'BUSINESSPARTNER'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-no_zero = 'X'.
  w_fcat-seltext_l = 'Business Partner'.
  APPEND w_fcat TO t_fcat.
  CLEAR w_fcat.

  w_fcat-fieldname = 'MSG'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'Message'.
  APPEND w_fcat TO t_fcat.

  w_fcat-fieldname = 'BPNAME'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'Business partner Name'.
  APPEND w_fcat TO t_fcat.

  w_fcat-fieldname = 'CUSTOMER'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'Customer No'.
  APPEND w_fcat TO t_fcat.
  CLEAR w_fcat.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form CREATE_BP_ADD_ROLE
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM create_bp_add_role .
  DATA : lv_error TYPE flag.
  DATA l_name1 TYPE kna1-name1.

  LOOP AT it_file INTO wa_file.
    partnercategory = '2'.
    partnergroup = wa_file-partn_grp.
    CLEAR businesspartnerextern.
    PERFORM fill_centraldata.
    PERFORM fill_address.
    PERFORM call_bapi_bupa_create USING wa_file CHANGING lv_error.
    IF businesspartner IS NOT INITIAL AND lv_error IS INITIAL.
      PERFORM add_role_bp.
      IF lv_flag = 'X'.
        SELECT SINGLE * FROM kna1 INTO @DATA(wa_kna1) WHERE kunnr = @businesspartner.
      ENDIF.
    ENDIF.
    PERFORM maintain_customer_s.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form DISPLAY_LOG_BP
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_log_bp .
  CHECK t_log IS NOT INITIAL.
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_grid_title = 'Log'
      is_layout    = s_layout
      it_fieldcat  = t_fcat
    TABLES
      t_outtab     = t_log
    .
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF. " IF sy-subrc <> 0
ENDFORM.
*&---------------------------------------------------------------------*
*& Form FILL_CENTRALDATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fill_centraldata .

  centraldata-searchterm1 = wa_file-sterm1.
  DATA: adrnr  TYPE ad_addrnum,
        w_part TYPE bu_partner,
        err    TYPE string.
  CLEAR: adrnr, w_part, err.
  centraldata-searchterm2 = wa_file-sterm2.
  centraldata-title_key = wa_file-title.
  IF partnercategory = 2.
  ELSE.
    centraldataperson-correspondlanguage = 'E'.
    centraldataperson-correspondlanguageiso = 'EN'.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form FILL_ADDRESS
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fill_address .
  IF partnercategory = 2.
    centraldataorganization-name1 = wa_file-name1.
    centraldataorganization-name2 = wa_file-name2.
    centraldataorganization-name3 = wa_file-name3.
    centraldataorganization-name4 = wa_file-name4.
  ELSEIF partnercategory = 1.
    centraldataperson-firstname = wa_file-name1.
  ENDIF.

  addressdata-street            =     wa_file-street.
  addressdata-str_suppl1        = wa_file-str_suppl1.
  addressdata-str_suppl2        = wa_file-str_suppl2.
  addressdata-str_suppl3        = wa_file-str_suppl3.
  addressdata-postl_cod1        = wa_file-postl_cod1.
  addressdata-city              = wa_file-city      .
  addressdata-country           = wa_file-country   .
  addressdata-region            = wa_file-region    .
  addressdata-langu             = wa_file-langu     .
  addressdata-extaddressnumber  = wa_file-extaddressnumber.

  REFRESH it_telephondata.
  wa_telephondata-country = wa_file-country.
  wa_telephondata-telephone = wa_file-mob_number.
  wa_telephondata-std_no = 'X'.
  wa_telephondata-r_3_user = '3'.
  wa_telephondata-consnumber = '001'.
  wa_telephondata-home_flag = 'X'.
  APPEND wa_telephondata TO it_telephondata.

  CLEAR wa_telephondata.
  wa_telephondata-country = wa_file-country.
  wa_telephondata-telephone = wa_file-tel_number.
  wa_telephondata-std_no = 'X'.
  wa_telephondata-r_3_user = '1'.
  wa_telephondata-consnumber = '002'.
  wa_telephondata-home_flag = 'X'.
  APPEND wa_telephondata TO it_telephondata.

  REFRESH it_maildata.
  wa_maildata-e_mail = wa_file-smtp_addr.
  wa_maildata-std_no = 'X'.
  wa_maildata-std_recip = 'X'.
  wa_maildata-home_flag = 'X'.
  wa_maildata-consnumber = '001'.
  APPEND wa_maildata TO it_maildata.

  REFRESH it_fax.
  wa_fax-contact-task = 'I'.
  wa_fax-contact-data-country = 'IN'.
  wa_fax-contact-datax-country = 'X'.
  wa_fax-contact-data-fax = wa_file-fax.
  wa_fax-contact-datax-fax = 'X'.
  APPEND wa_fax TO it_fax.


  wa_fax_tab-country = wa_file-country.
  wa_fax_tab-fax = wa_file-fax.
  APPEND wa_fax_tab TO it_fax_tab.

  BREAK abaper.

  wa_fax_str-fax = it_fax[].


  FREE : it_remark[], it_remarkx[].
  CLEAR : wa_remark, wa_remarkx.
  wa_remark-langu = 'E'.
  wa_remarkx-langu = 'E'.
  wa_remark-langu_iso = 'EN'.
  wa_remarkx-langu_iso = 'EN'.
  wa_remark-adr_notes = wa_file-remark.
  wa_remarkx-adr_notes = 'X'.
  APPEND wa_remark TO it_remark.
  APPEND wa_remarkx TO it_remarkx.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form CALL_BAPI_BUPA_CREATE
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> WA_FILE
*&      <-- LV_ERROR
*&---------------------------------------------------------------------*
FORM call_bapi_bupa_create  USING    p_wa_file
                            CHANGING lv_error.

  DATA: tax_ret TYPE TABLE OF bapiret2,
        lv_bp   TYPE bu_partner.

  CLEAR businesspartner.
  CLEAR: lv_error, w_log.

  lv_bp =  wa_file-sterm2.
  CLEAR lwa_kna1.
  CLEAR : v_exist.
  CLEAR : wa_kna1n , wa_knb1n,lv_flag1.
  CLEAR lv_flag1.
  SELECT SINGLE kunnr
    FROM kna1
    INTO @DATA(lv_kunnr_check)
    WHERE kunnr = @businesspartner.
  IF sy-subrc EQ 0.
    lv_flag1 = 'X'.
  ENDIF.
  IF lv_flag1 = 'X'.
    businesspartner = lv_kunnr_check.
    v_exist = 'X'.
    lv_string = businesspartner.
    CONCATENATE 'Business Partner' lv_string 'already existed' INTO  w_log-msg SEPARATED BY space.
    w_log-msgnr = '003'.
    APPEND w_log TO t_log.
  ELSE.
    CLEAR: v_exist.
    BREAK abaper.

    businesspartnerextern-externaladdressnumber = wa_file-extaddressnumber.
    CALL FUNCTION 'BAPI_BUPA_CREATE_FROM_DATA'
      EXPORTING
        partnercategory         = partnercategory
        partnergroup            = partnergroup
        centraldata             = centraldata
        centraldataperson       = centraldataperson
        centraldataorganization = centraldataorganization
        addressdata             = addressdata
      IMPORTING
        businesspartner         = businesspartner
      TABLES
        telefondata             = it_telephondata
        faxdata                 = it_fax_tab
        e_maildata              = it_maildata
        addressnotes            = it_remark
        return                  = return.
    LOOP AT return INTO lwa_return .
      w_log-sortl = lv_bp.
      w_log-bu_partnerx = 'B'.
      w_log-msg  =  lwa_return-message.
      w_log-msgtyp = lwa_return-type.
      w_log-msgnr = lwa_return-number.
      w_log-uzeit = sy-uzeit.
      w_log-erdat = sy-datum.
      w_log-uname = sy-uname.
      APPEND w_log TO t_log.
      CLEAR w_log.
      IF lwa_return-type = 'E'.
        lv_error = 'X'.
      ENDIF.
    ENDLOOP.

    IF lv_error IS NOT INITIAL.
      ROLLBACK WORK.
    ENDIF.
    IF  businesspartner IS NOT INITIAL .
      IF lv_error IS INITIAL.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.
        lv_flag = 'X'.
      ENDIF.

    ENDIF.

    PERFORM gst_no.

    w_log-bu_partner = businesspartner.
    w_log-bu_partnerx = 'B'.

    SELECT kunnr name1 sortl name4
      FROM kna1
      APPENDING TABLE lt_kna1
    WHERE name4 EQ wa_file-name4.

    SELECT kunnr name1 sortl name4
      FROM kna1
      APPENDING TABLE lt_kna1
    WHERE name1 EQ wa_file-name1.

    READ TABLE return INTO DATA(wa) WITH KEY type = 'E'.
    IF sy-subrc = 0.
      w_log-msg  = 'Business Partner Num Generated/Not Created'.
      w_log-msgnr = '002'.
    ELSE.
      w_log-msg  = 'Business Partner Created'.
      w_log-customer = 'Customer No is'.
      w_log-msgnr = '001'.
    ENDIF.

    APPEND w_log TO t_log.
    CLEAR w_log.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form ADD_ROLE_BP
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM add_role_bp .
  DATA businesspartnerrolecategory TYPE bapibus1006_bproles-partnerrolecategory. " BP Role Category
  DATA all_businesspartnerroles TYPE bapibus1006_x-mark. " Data element for domain BOOLE: TRUE (='X') and FALSE (=' ')
  DATA businesspartnerrole TYPE bapibus1006_bproles-partnerrole. " BP Role
  DATA differentiationtypevalue TYPE bapibus1006_bproles-difftypevalue. " BP: Differentiation type value
  DATA validfromdate               TYPE bapibus1006_bprole_validity-bprolevalidfrom.
  DATA validuntildate              TYPE bapibus1006_bprole_validity-bprolevalidto.
  DATA return TYPE STANDARD TABLE OF bapiret2. " Return Parameter
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*

  DATA : lv_rltyp TYPE but100-rltyp.
  businesspartnerrole = 'FLCU00'.
  CALL FUNCTION 'BAPI_BUPA_ROLE_ADD_2'
    EXPORTING
      businesspartner             = businesspartner
      businesspartnerrolecategory = businesspartnerrolecategory
      all_businesspartnerroles    = ' '
      businesspartnerrole         = businesspartnerrole
      differentiationtypevalue    = differentiationtypevalue
      validuntildate              = '99991231'
    TABLES
      return                      = return.
  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = 'X'.
  CLEAR lv_rltyp.
  SELECT SINGLE rltyp INTO lv_rltyp FROM but100 WHERE partner = businesspartner
  AND rltyp = 'FLCU00'.

  IF lv_rltyp IS INITIAL.
    WAIT UP TO 1 SECONDS.
  ENDIF.

*&---------------------------------------------------------------------*
*&    Add Customer Roles
*&---------------------------------------------------------------------*


  businesspartnerrole = 'FLCU01'.
  CALL FUNCTION 'BAPI_BUPA_ROLE_ADD_2'
    EXPORTING
      businesspartner             = businesspartner
      businesspartnerrolecategory = businesspartnerrolecategory
      all_businesspartnerroles    = ' '
      businesspartnerrole         = businesspartnerrole
      differentiationtypevalue    = differentiationtypevalue
      validuntildate              = '99991231'
    TABLES
      return                      = return.
  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = 'X'.
  CLEAR lv_rltyp.
  SELECT SINGLE rltyp INTO lv_rltyp FROM but100 WHERE partner = businesspartner
  AND rltyp = 'FLCU01'.

  IF lv_rltyp IS INITIAL.
    WAIT UP TO 1 SECONDS.
  ENDIF.

  businesspartnerrole = 'UKM000'.
  CALL FUNCTION 'BAPI_BUPA_ROLE_ADD_2'
    EXPORTING
      businesspartner             = businesspartner
      businesspartnerrolecategory = businesspartnerrolecategory
      all_businesspartnerroles    = ' '
      businesspartnerrole         = businesspartnerrole
      differentiationtypevalue    = differentiationtypevalue
      validuntildate              = '99991231'
    TABLES
      return                      = return.
  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = 'X'.

  CLEAR lv_rltyp.
  SELECT SINGLE rltyp INTO lv_rltyp FROM but100 WHERE partner = businesspartner
  AND rltyp = 'UKM000'.

  IF lv_rltyp IS INITIAL.
    WAIT UP TO 1 SECONDS.
  ENDIF.

  SELECT *  FROM but000  INTO TABLE it_but000 WHERE partner = businesspartner.

  SELECT * FROM cvi_cust_link INTO TABLE it_cvi_cust_link FOR ALL ENTRIES IN it_but000 WHERE partner_guid = it_but000-partner_guid.

  READ TABLE it_cvi_cust_link INTO wa_cvi_cust_link INDEX 1.

  w_log-customer = wa_cvi_cust_link-customer.
  MODIFY t_log FROM w_log TRANSPORTING vendor customer WHERE
        bu_partner = businesspartner.

ENDFORM.

*&---------------------------------------------------------------------*
*& Form FILL_FCAT_CUSTOMER_S_LOG
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fill_fcat_customer_s_log .
  s_layout-colwidth_optimize = 'X'.
  s_layout-zebra = 'X'.

  w_fcat-fieldname = 'MSGTYP'.
  w_fcat-seltext_l = 'Message Type'.
  w_fcat-tabname = 'T_LOG'.
  APPEND w_fcat TO t_fcat.
  CLEAR w_fcat.

  w_fcat-fieldname = 'MSGNR'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'Message No'.
  APPEND w_fcat TO t_fcat.
  CLEAR w_fcat.

  w_fcat-fieldname = 'BU_PARTNER'.
  w_fcat-no_zero = 'X'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'Customer'.
  APPEND w_fcat TO t_fcat.
  CLEAR w_fcat.

  w_fcat-fieldname = 'MSG'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'Message'.
  APPEND w_fcat TO t_fcat.

  w_fcat-fieldname = 'BPNAME'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'Customer Name'.
  APPEND w_fcat TO t_fcat.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form MAINTAIN_CUSTOMER_S
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM maintain_customer_s .
  DATA is_master_data TYPE cmds_ei_main. " Ext. Interface: Total Customer Data
  DATA es_master_data_correct TYPE cmds_ei_main. " Ext. Interface: Total Customer Data
  DATA es_message_correct TYPE cvis_message. " Error Indicator and System Messages
  DATA es_master_data_defective TYPE cmds_ei_main. " Ext. Interface: Total Customer Data
  DATA es_message_defective TYPE cvis_message. " Error Indicator and System Messages

  DATA: lt_customers    TYPE cmds_ei_extern_t,
        ls_customers    TYPE cmds_ei_extern,         " Complex External Interface for Customers
        ls_address      TYPE cvis_ei_address1,       " Ext. Interface: Address of Organization
        ls_sales_data   TYPE cmds_ei_cmd_sales,      " Ext. Interface: Sales Data
        ls_central_data TYPE cmds_ei_central_data,   " External Interface: Central Data
        lt_sales        TYPE cmds_ei_sales_t,
        ls_sales        TYPE cmds_ei_sales,          " Ext. Interface: Sales Data
        lt_sales_func   TYPE cmds_ei_functions_t,
        ls_sales_func   TYPE cmds_ei_functions,      " Ext. Interface: Partner Roles
        ls_tax_data     TYPE cmds_ei_tax_ind,        " Ext. Interface: Tax Indicators
        lt_tax_data     TYPE cmds_ei_tax_ind_t,
        ls_message      TYPE cvis_message,           " Error Indicator and System Messages
        gt_remarks      TYPE cvis_ei_cvi_rem,
        gs_remarks      TYPE cvis_ei_cvi_rem,
        lv_contactid    TYPE bapicontact_01-contact. " Number of contact person
  DATA:
    lt_company      TYPE cmds_ei_company_t,
    ls_company      TYPE cmds_ei_company,        " Ext. Interface: Company Code Data
    ls_company_data TYPE cmds_ei_cmd_company.    " Ext. Interface: Company Code Data

  DATA:
    io_facade               TYPE REF TO cl_ukm_facade,
    io_partner              TYPE REF TO cl_ukm_business_partner,
    io_bupa_factory         TYPE REF TO cl_ukm_bupa_factory,
    io_calculator           TYPE REF TO if_ukm_calculator,
    io_account              TYPE REF TO cl_ukm_account,
    io_ref_business_partner TYPE REF TO cl_udm_business_partner,
    i_return                TYPE ukm_t_monitor_return,
    wa_return               LIKE LINE OF i_return,
    wa_ukm_s_bp_cms         TYPE ukm_s_bp_cms,
    wa_ukmbp_sgm            TYPE ukmbp_cms_sgm,
    wa_bp_cms               TYPE ukm_s_bp_cms,
    wa_bp_credit_sgm        TYPE ukm_s_bp_cms_sgm,
    i_credstd               TYPE STANDARD TABLE OF bp1010,
    et_return               TYPE bapiret2_t,
    wa_credstd              TYPE bp1010,
    es_return               LIKE LINE OF et_return.

  DATA:
    lv_partner      TYPE bu_partner,
    lv_credit_sgmnt TYPE ukm_credit_sgmnt.

  REFRESH lt_tax_data.
  REFRESH is_master_data-customers.
  REFRESH lt_customers[].
  REFRESH lt_sales[].
  REFRESH lt_sales_func.
  CLEAR ls_tax_data.
  CLEAR ls_sales_func.
  CLEAR ls_customers.
  CLEAR ls_address.
  CLEAR is_master_data.
  CLEAR ls_sales_data.
  CLEAR lt_sales     .
  CLEAR ls_sales     .
  REFRESH is_master_data-customers.
  REFRESH lt_customers[].
  REFRESH lt_company[].
  CLEAR ls_customers.
  CLEAR ls_company_data.
  CLEAR ls_address.
  CLEAR ls_company.
  CLEAR is_master_data.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = w_log-customer
    IMPORTING
      output = ls_customers-header-object_instance-kunnr.
  CLEAR kna1.
  SELECT SINGLE * FROM kna1 WHERE kunnr = ls_customers-header-object_instance-kunnr.
  IF sy-subrc = 0.
    UPDATE kna1
    SET j_1ipanno = @wa_file-pan,
            kukla = @wa_file-kukla,
            niels = @wa_file-niels
      WHERE kunnr = @ls_customers-header-object_instance-kunnr.

  ENDIF.


  ls_customers-header-object_task = 'U'.
  ls_address-postal-data-name          = kna1-name1.
  ls_address-postal-data-country       = kna1-land1.
  ls_address-postal-datax-name         = 'X'.
  ls_address-postal-datax-country      = 'X'.
  ls_address-task                      = 'U'.
  ls_customers-central_data-address = ls_address.

  ls_sales-task = 'I'.
  ls_sales-data_key-vkorg = wa_file-vkorg.
  ls_sales-data_key-vtweg = wa_file-vtweg.
  ls_sales-data_key-spart = wa_file-spart.

  ls_sales-data-inco1 = wa_file-inco1.
  ls_sales-data-inco2 = wa_file-inco2.
  ls_sales-data-kdgrp = wa_file-kdgrp.
  ls_sales-data-ktgrd = '01'.
  ls_sales-data-zterm = wa_file-zterm.
  ls_sales-data-vkbur = wa_file-vkbur.
  ls_sales-data-vkgrp = wa_file-vkgrp.
  ls_sales-data-waers = wa_file-waers.
  ls_sales-data-kalks = wa_file-kalks.
  ls_sales-data-versg = '1'.
  ls_sales-data-vsbed = '01'.
  ls_sales-data-kurst = 'M'.
  ls_sales-datax-kdgrp = 'X'.
  ls_sales-datax-vkbur = 'X'.
  ls_sales-datax-vkgrp = 'X'.
  ls_sales-datax-waers = 'X'.
  ls_sales-datax-kurst = 'X'.
  ls_sales-datax-kalks = 'X'.
  ls_sales-datax-versg = 'X'.
  ls_sales-datax-vsbed = 'X'.
  ls_sales-datax-inco1 = 'X'.
  ls_sales-datax-inco2 = 'X'.
  ls_sales-datax-zterm = 'X'.
  ls_sales-datax-ktgrd = 'X'.

  DATA iv_ktokd TYPE ktokd.
  DATA et_parvw TYPE cmds_parvw_t.
  CALL METHOD cmd_ei_api_check=>get_mand_partner_functions
    EXPORTING
      iv_ktokd = kna1-ktokd
    IMPORTING
      et_parvw = et_parvw.

  LOOP AT et_parvw INTO DATA(wa_parvw).
    ls_sales_func-task = 'I'.
    ls_sales_func-data_key-parvw = wa_parvw-parvw.
    ls_sales_func-data-partner = kna1-kunnr.
    ls_sales_func-datax-partner = 'X'.
    APPEND ls_sales_func TO lt_sales_func.
    CLEAR ls_sales_func.
  ENDLOOP.
  ls_sales-functions-functions = lt_sales_func[].
  APPEND ls_sales TO lt_sales.

  ls_sales_data-sales = lt_sales[].

  ls_central_data-tax_ind-tax_ind = lt_tax_data.
  ls_customers-central_data = ls_central_data.
  ls_customers-sales_data = ls_sales_data.

  ls_remarks-task = 'U'.
  ls_remarks-data-langu = 'E'.
  ls_remarks-datax-langu = 'X'.
  ls_remarks-data-langu_iso = 'EN'.
  ls_remarks-datax-langu_iso = 'X'.
  ls_remarks-data-adr_notes = wa_file-remark.
  ls_remarks-datax-adr_notes = 'X'.
  APPEND ls_remarks TO lt_remarks.

  ls_customers-central_data-address-remark-remarks = lt_remarks[].

  REFRESH: lt_company[].
  CLEAR ls_company.
  ls_company-task                    = 'I'.
  ls_company-data_key-bukrs  = wa_file-bukrs.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = wa_file-akont
    IMPORTING
      output = ls_company-data-akont.
  ls_company-datax-akont        = 'X'.
  IF headoffice IS NOT INITIAL.
    ls_company-data-knrze  = headoffice.
    ls_company-datax-knrze = 'X'.
  ENDIF.
  ls_company-data-zterm =  wa_file-zterm.
  ls_company-datax-zterm =  'X'.
  APPEND ls_company TO lt_company.
  ls_company_data-company = lt_company[].
  ls_customers-company_data = ls_company_data.
  ls_customers-central_data-address-communication-fax = wa_fax_str.

  APPEND ls_customers TO lt_customers.
  is_master_data-customers = lt_customers[].
  cmd_ei_api=>initialize( ).

  BREAK abaper.

  CALL METHOD cmd_ei_api=>maintain_bapi
    EXPORTING
      is_master_data           = is_master_data
    IMPORTING
      es_master_data_correct   = es_master_data_correct
      es_message_correct       = es_message_correct
      es_master_data_defective = es_master_data_defective
      es_message_defective     = es_message_defective.
  IF es_message_defective-is_error IS INITIAL.
    COMMIT WORK.
    WAIT UP TO 1 SECONDS.
    w_log-bu_partner = w_log-customer.
    w_log-bu_partnerx = 'C'.
    CONCATENATE 'Cust. Extended to Sales Area and Cust.Extended to FI Area' w_log-customer INTO w_log-msg SEPARATED BY space.
    w_log-msgtyp = 'S'.
    w_log-msgnr = '001'.
    w_log-uzeit = sy-uzeit.
    w_log-erdat = sy-datum.
    w_log-uname = sy-uname.
    w_log-bpname = kna1-name1.
    APPEND w_log TO t_log.
    CLEAR w_log.
    SELECT SINGLE * FROM knb1 WHERE kunnr = ls_customers-header-object_instance-kunnr      .
    IF sy-subrc = 0.
      UPDATE knb1
      SET zsabe = wa_file-extaddressnumber
    WHERE kunnr = ls_customers-header-object_instance-kunnr.
    ENDIF.

    lv_partner = businesspartner.
    io_facade = cl_ukm_facade=>create( i_activity = cl_ukm_cnst_eventing=>bp_maintenance ).
    io_bupa_factory = io_facade->get_bupa_factory( ).
    io_calculator = io_facade->get_calculator( ).
    io_partner = io_bupa_factory->get_business_partner( lv_partner ).
**
*** Set Credit Profile Data
    wa_bp_cms-risk_class = '001'.
    wa_bp_cms-limit_rule = 'STANDARD'.
    wa_bp_cms-check_rule = '03'.
    io_partner->set_bp_cms( wa_bp_cms ).

* Get Credit Account
    CALL METHOD io_bupa_factory->get_credit_account
      EXPORTING
        i_partner         = lv_partner
        i_credit_sgmnt    = wa_file-credit_seg
      RECEIVING
        ro_credit_account = io_account.

* get credit segment data
    io_account->get_bp_cms_sgm( IMPORTING es_bp_cms_sgm = wa_bp_credit_sgm ).

    wa_bp_credit_sgm-credit_limit = wa_file-credit_limit.
    wa_bp_credit_sgm-xcritical = 'X'.
    wa_bp_credit_sgm-limit_chg_date = sy-datum.

* Set Credit Segment Data.
    io_account->set_bp_cms_sgm( EXPORTING is_bp_cms_sgm = wa_bp_credit_sgm ).

* Get Credit Profile Data

* Update the credit segment and credit profile

    io_bupa_factory->save_all( ).

    IF sy-subrc IS INITIAL.


      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.

      IF sy-subrc IS INITIAL.
        COMMIT WORK.
        WAIT UP TO 1 SECONDS.
      ENDIF.

    ENDIF.

  ELSE.
    LOOP AT es_message_defective-messages INTO DATA(wa).
      WAIT UP TO 1 SECONDS.
      w_log-bu_partner = w_log-customer.
      w_log-bu_partnerx = 'C'.
      IF w_log-msgtyp = 'S'.
        w_log-msgtyp = wa-type.
        w_log-msgnr = wa-number.
      ENDIF.
      w_log-msg = wa-message.
      w_log-uzeit = sy-uzeit.
      w_log-erdat = sy-datum.
      w_log-uname = sy-uname.
      w_log-bpname = kna1-name1.
      APPEND w_log TO t_log.
      CLEAR w_log.
    ENDLOOP.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form MAINTAIN_VENDOR_S
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM maintain_vendor_s .""""""""""""" for vendor
  DATA: lt_contacts      TYPE vmds_ei_contacts_t,
        ls_contacts      TYPE vmds_ei_contacts,       " Ext. Interface: Contact Person
        lt_vendors       TYPE vmds_ei_extern_t,
        ls_vendors       TYPE vmds_ei_extern,         " Complex External Interface for Vendors
        ls_address       TYPE cvis_ei_address1,       " Ext. Interface: Address of Organization
        ls_purchas_data  TYPE vmds_ei_vmd_purchasing, " Ext. Interface: Purchasing Data
        lt_purchasing    TYPE vmds_ei_purchasing_t,
        ls_purchasing    TYPE vmds_ei_purchasing,     " Ext. Interface: Purchasing Organization
        lt_purch_func    TYPE vmds_ei_functions_t,
        ls_purch_func    TYPE vmds_ei_functions,      " Ext. Interface: Partner Roles
        ls_message       TYPE cvis_message,           " Error Indicator and System Messages
        lv_contactid     TYPE bapicontact_01-contact, " Number of contact person
        gs_vmds_extern   TYPE vmds_ei_main,           " Ext. Interface: Vendor Total Data
        gs_succ_messages TYPE cvis_message,           " Error Indicator and System Messages
        gs_vmds_error    TYPE vmds_ei_main,           " Ext. Interface: Vendor Total Data
        gs_err_messages  TYPE cvis_message,           " Error Indicator and System Messages
        gs_vmds_succ     TYPE vmds_ei_main,           " Ext. Interface: Vendor Total Data
        gv_ktokk         TYPE ktokk,                  " Vendor account group
        gv_ccode         TYPE bukrs,                  " Company Code
        gv_akont         TYPE akont,                  " Reconciliation Account in General Ledger
        gv_name          TYPE name1.                  " Name
  DATA is_master_data TYPE cmds_ei_main. " Ext. Interface: Total Customer Data
  DATA es_master_data_correct TYPE cmds_ei_main. " Ext. Interface: Total Customer Data
  DATA es_message_correct TYPE cvis_message. " Error Indicator and System Messages
  DATA es_master_data_defective TYPE cmds_ei_main. " Ext. Interface: Total Customer Data
  DATA es_message_defective TYPE cvis_message. " Error Indicator and System Messages

  DATA: lt_company      TYPE vmds_ei_company_t,
        ls_company      TYPE vmds_ei_company,        " Ext. Interface: Company Code Data
        ls_company_data TYPE vmds_ei_vmd_company.   " Ext. Interface: Company Code Data

  DATA: lw_bupa TYPE bu_partner.
  DATA : lt_return TYPE STANDARD TABLE OF bapiret2.
  DATA : lw_details TYPE bapibus1006_bankdetail.

  w_log-customer = businesspartner.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = w_log-customer
    IMPORTING
      output = lw_bupa.

  businesspartner = lw_bupa.

  CLEAR: lw_details.

  CLEAR: lt_return.

  CLEAR gs_vmds_extern.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = w_log-customer
    IMPORTING
      output = ls_vendors-header-object_instance-lifnr.
  SELECT SINGLE * FROM kna1 WHERE kunnr = ls_vendors-header-object_instance-lifnr.
  ls_vendors-header-object_task = 'U'. "Represents Insert or Create
  ls_address-postal-data-name          = kna1-name1. "Name of the Vendor
  ls_address-postal-data-country       = kna1-land1.
  ls_address-postal-datax-name         = 'X'.
  ls_address-postal-datax-country      = 'X'.
  ls_address-task                      = 'U'.

*   Set the Address for the Vendor
  ls_vendors-central_data-address = ls_address.
  ls_vendors-central_data-central-data-kunnr = businesspartner.
  ls_vendors-central_data-central-datax-kunnr = 'X'.

  IF wa_file-bukrs IS NOT INITIAL.

    REFRESH: lt_company[],lt_vendors.
    CLEAR: ls_company_data.
    CLEAR ls_company.
    ls_company-task                    = 'I'.
    ls_company-data_key-bukrs  = wa_file-bukrs.
    ls_company-datax-akont       = 'X'.
    APPEND ls_company TO lt_company.
    ls_company_data-company = lt_company[].
    ls_vendors-company_data = ls_company_data.
  ENDIF.
  """""""""""""""""""""""""""""""""""""""
  APPEND ls_vendors TO lt_vendors.
*   Set the Final Vendor Data based on which it has to be created
  gs_vmds_extern-vendors = lt_vendors[].
  vmd_ei_api=>initialize( ).
*   Call the Method for creation of Vendor.
  CALL METHOD vmd_ei_api=>maintain_bapi
    EXPORTING
      is_master_data           = gs_vmds_extern
    IMPORTING
      es_master_data_correct   = gs_vmds_succ
      es_message_correct       = gs_succ_messages
      es_master_data_defective = gs_vmds_error
      es_message_defective     = gs_err_messages.

  IF gs_err_messages-is_error IS INITIAL.
    COMMIT WORK.
    WAIT UP TO 1 SECONDS.
    w_log-bu_partner = lw_bupa.
    w_log-customer = w_log-customer.
    w_log-bu_partnerx = 'V'.
    w_log-msg  = 'Vendor Extended' .
    w_log-msgtyp = 'S'.
    w_log-msgnr = '001'.
    w_log-uzeit = sy-uzeit.
    w_log-erdat = sy-datum.
    w_log-uname = sy-uname.
    w_log-bpname = lfa1-name1.
    APPEND w_log TO t_log.
    CLEAR w_log.
  ELSE. " ELSE -> IF gs_err_messages-is_error IS INITIAL
    LOOP AT gs_err_messages-messages INTO DATA(wa).
      w_log-bu_partner = lw_bupa.
      w_log-customer = w_log-customer.
      w_log-bu_partnerx = 'V'.
      w_log-msg  = wa-message.
      w_log-msgtyp = wa-type.
      w_log-msgnr = wa-number.
      w_log-uzeit = sy-uzeit.
      w_log-erdat = sy-datum.
      w_log-uname = sy-uname.
      w_log-bpname = lfa1-name1.
      APPEND w_log TO t_log.
      CLEAR w_log.
    ENDLOOP.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*& Form DISPLAY_LOG_CUSTOMER_S
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_log_customer_s .
  CHECK t_log IS NOT INITIAL.
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_grid_title = 'Log'
      is_layout    = s_layout
      it_fieldcat  = t_fcat
    TABLES
      t_outtab     = t_log
    .
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF. " IF sy-subrc <> 0
ENDFORM.
*&---------------------------------------------------------------------*
*& Form FILL_FCAT_CUSTOMER_CC_LOG
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fill_fcat_customer_cc_log .
  s_layout-colwidth_optimize = 'X'.
  s_layout-zebra = 'X'.

  w_fcat-fieldname = 'MSGTYP'.
  w_fcat-seltext_l = 'Message Type'.
  w_fcat-tabname = 'T_LOG'.
  APPEND w_fcat TO t_fcat.
  CLEAR w_fcat.

  w_fcat-fieldname = 'MSGNR'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'Message No'.
  APPEND w_fcat TO t_fcat.
  CLEAR w_fcat.

  w_fcat-fieldname = 'BU_PARTNER'.
  w_fcat-no_zero = 'X'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'KUNNR'.
  APPEND w_fcat TO t_fcat.
  CLEAR w_fcat.

  w_fcat-fieldname = 'MSG'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'Message'.
  APPEND w_fcat TO t_fcat.

  w_fcat-fieldname = 'BPNAME'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'Customer Name'.
  APPEND w_fcat TO t_fcat.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form DISPLAY_LOG_CUSTOMER_CC
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_log_customer_cc .
  CHECK t_log IS NOT INITIAL.
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_grid_title = 'Log'
      is_layout    = s_layout
      it_fieldcat  = t_fcat
    TABLES
      t_outtab     = t_log
    .
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF. " IF sy-subrc <> 0
ENDFORM.

*----------------------------------------------------------------------*
*        Start new screen                                              *
*----------------------------------------------------------------------*
FORM bdc_dynpro USING program dynpro.
  CLEAR bdcdata.
  bdcdata-program  = program.
  bdcdata-dynpro   = dynpro.
  bdcdata-dynbegin = 'X'.
  APPEND bdcdata.
ENDFORM.                    "bdc_dynpro

*----------------------------------------------------------------------*


*        Insert field                                                  *
*----------------------------------------------------------------------*
FORM bdc_field USING fnam fval.
  CLEAR bdcdata.
  bdcdata-fnam = fnam.
  bdcdata-fval = fval.
  CONDENSE bdcdata-fval.
  APPEND bdcdata.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form GST_NO
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM gst_no .

  DATA: lw_bupa TYPE bu_partner.
  DATA : lt_return TYPE STANDARD TABLE OF bapiret2.

  CALL FUNCTION 'BAPI_BUPA_TAX_ADD'
    EXPORTING
      businesspartner = businesspartner
      taxtype         = wa_file-taxtype
      taxnumber       = wa_file-taxnumber
    TABLES
      return          = lt_return.

ENDFORM.
