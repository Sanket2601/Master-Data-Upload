*&---------------------------------------------------------------------*
*& Report ZUPLOAD_VEND
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zupload_vend.
*&---------------------------------------------------------------------*
*& Module : MM
*&---------------------------------------------------------------------*
*REPORT zbapi_vendor_upload.
TABLES: but000,kna1,lfa1,lfb1,pa0006,pa0002.
TYPES: BEGIN OF ty_file_bp,
         bpno_ext        TYPE bapibus1006_head-bpartner,
         ktokd           TYPE ktokd,    "PARTN_GRP
         title           TYPE ad_titletx,                 " Title text
         name1           TYPE kna1-name1,                 " Name 1 of organization
         name2           TYPE bu_nameor1,                 " Name 2 of organization
         sterm1          TYPE sortl,                      "Search Term 1
*         sterm1      TYPE sortl,                      "Search Term 1
         sterm2          TYPE bu_sort2,                   "Search Term 2
         c_o             TYPE ad_name_co,  "C/O care of
         street          TYPE ad_street,                  " Street
         str_suppl1      TYPE ad_strspp1,                 "Street 2
         postl_cod1      TYPE ad_pstcd1,                  "City Postal Code
         city            TYPE ad_city1,                   "City
         country         TYPE land1,                      "Country
         region          TYPE regio,                      "Region
         langu           TYPE spras,                      "Language
         tel_number      TYPE ad_tlnmbr,                  " Telephone no.: dialling code+number
         mob_number      TYPE ad_tlnmbr,                  " Telephone no.: dialling code+number
         smtp_addr       TYPE ad_smtpadr,                 " E-Mail Address
         smtp_addr2      TYPE ad_smtpadr,                 " E-Mail Address 2
         bpext           TYPE but000-bpext,                     "Business Partner Number in External System
         calendarid      TYPE bp001-calendarid,              "Factory calendar

         taxtyp1         TYPE bapibus1006tax-taxtype,  " Tax Number Category
         taxnum1         TYPE bapibus1006tax-taxnumber, " Business Partner Tax Number
         panno           TYPE j_1ipanno,
         bukrs           TYPE lfb1-bukrs, " Company Code
         akont           TYPE akont,      "Recon Account
         vkorg           TYPE ekorg,  " purchase Organization
*    ekorg       TYPE ekorg,  " Sales Organization
         waers           TYPE waers,  " Currency Key
         zterm           TYPE dzterm, " Terms of payment key
         zwels           TYPE dzwels, " List of Respected Payment Methods
         inco1           TYPE inco1,
         inco2           TYPE inco2,
*        lifnr      TYPE lifnr,      " Account Number of Vendor or Creditor
*
*         ktokd       TYPE ktokd,    "PARTN_GRP

         webre           TYPE webre,  " Indicator: GR-Based Invbaoice Verification
         lebre           TYPE lebre,  " Indicator: search-Based Invoice Verification
         ekgrp           TYPE ekgrp,  " Purchase grp
         kalsk           TYPE kalsk,  " Group for Calculation Schema (Supplier)
         " Reconcilliation Account for Customer
*         bankl       TYPE bankl, "bank_key
*         banka       TYPE banka, "name of the institution
*"         bankn       TYPE bankn,"bank acc number
         bank_ctry       TYPE bapibus1006_bankdetail-bank_ctry,
         bank_key        TYPE bapibus1006_bankdetail-bank_key,
         ctrl_key        TYPE bapibus1006_bankdetail-ctrl_key,
         bank_acct       TYPE bapibus1006_bankdetail-bank_acct,
         accountholder   TYPE bapibus1006_bankdetail-accountholder,
         bankaccountname TYPE bapibus1006_bankdetail-bankaccountname,

         whtx_ty_inv     TYPE witht,
         whtx_cd_inv     TYPE wt_withcd,
         whtx_ty_pym     TYPE witht,
         whtx_cd_pym     TYPE wt_withcd,
         cert_id         TYPE idsau_cr_id,                   "MSME Id
         cert_no         TYPE idsau_cr_no,
         j_1ivtyp        TYPE j_1ivtyp,
         akontc          TYPE akont,
         main_cr(1)      TYPE c,
         lfabc           TYPE vmds_ei_purchasing_datax-lfabc,
       END OF ty_file_bp.

DATA : it_msme TYPE TABLE OF idsau_cr_data,
       wa_msme TYPE idsau_cr_data.

DATA: BEGIN OF bdcdata OCCURS 0.
        INCLUDE STRUCTURE bdcdata.
DATA: END OF bdcdata.
DATA: b_part TYPE string.
*DATA : akontc      TYPE akont.
DATA: itab1 LIKE alsmex_tabline OCCURS 0 WITH HEADER LINE.
DATA:ean7 TYPE mara-ean11.
DATA: gt_data TYPE TABLE  OF ty_file_bp,
      gs_data TYPE  ty_file_bp,
      it_data TYPE TABLE OF ty_file_bp,
      wa_data TYPE ty_file_bp.
FIELD-SYMBOLS : <fs_xl>  TYPE alsmex_tabline,
                <fs_tbl> TYPE any.
DATA : gv_index          TYPE sy-index.

DATA businesspartnerextern TYPE bapibus1006_head-bpartner. " Business Partner Number
DATA partnercategory TYPE bapibus1006_head-partn_cat. " Business Partner Category
DATA partnergroup TYPE bapibus1006_head-partn_grp. " Business Partner Grouping
DATA centraldata TYPE bapibus1006_central. " General BP Data, Independent of Business Partner Category
DATA centraldataperson TYPE bapibus1006_central_person. " SAP BP: BAPI Structure for Personal Data
DATA centraldataorganization TYPE bapibus1006_central_organ. " SAP BP: BAPI Structure for Organization Data
DATA addressdata TYPE bapibus1006_address. " SAP BP: BAPI Structure for Address Data
DATA businesspartner TYPE bapibus1006_head-bpartner. " Business Partner Number
DATA it_telephondata TYPE STANDARD TABLE OF bapiadtel. " BAPI Structure for Telephone Numbers (Bus. Address Services)
DATA wa_telephondata TYPE bapiadtel. " BAPI Structure for Telephone Numbers (Bus. Address Services)
DATA it_maildata TYPE STANDARD TABLE OF bapiadsmtp. " BAPI Structure for E-Mail Addresses (Bus. Address Services)
DATA wa_maildata TYPE bapiadsmtp. " BAPI Structure for E-Mail Addresses (Bus. Address Services)
DATA return TYPE STANDARD TABLE OF bapiret2. " Return Parameter
************************
DATA : it_raw    TYPE truxs_t_text_data.
DATA: it_file TYPE TABLE OF ty_file_bp.
DATA: wa_file TYPE ty_file_bp.
DATA: t_fcat TYPE slis_t_fieldcat_alv.
DATA: w_fcat TYPE slis_fieldcat_alv.
DATA: s_layout TYPE slis_layout_alv.
DATA: lwa_return TYPE bapiret2.
TYPES : BEGIN OF zbp_upload,

          serial      TYPE char100,
          msgtyp      TYPE char10,
          msgnr       TYPE num10,
          bu_partner  TYPE bapibus1006_head-bpartner,
          msg         TYPE char100,
          bpname      TYPE name1,
          vendor      TYPE lifnr,
          sortl       TYPE sortl,
          customer    TYPE kunnr,
          bu_partnerx TYPE c,
          uzeit       TYPE sy-uzeit,
          erdat       TYPE sy-datum,
          uname       TYPE sy-uname,
*          bpname      TYPE name1,

        END OF zbp_upload.

*DATA:

DATA: t_log TYPE TABLE OF zbp_upload, "TY_LOG,
      w_log TYPE zbp_upload.
DATA: gt_messages TYPE STANDARD TABLE OF bdcmsgcoll,
      gw_messages TYPE bdcmsgcoll.

DATA:it_but000 TYPE TABLE OF but000,
     wa_but000 TYPE but000.
DATA: it_cvi_vend_link TYPE TABLE OF cvi_vend_link,
      wa_cvi_vend_link TYPE cvi_vend_link.

DATA : r4 TYPE c,
       r5 TYPE c.
DATA : gwa_knvi TYPE knvi.


SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE TEXT-101.
  PARAMETERS: p_infile LIKE rlgrap-filename  ,        "File Path
              head(5)  DEFAULT '1' NO-DISPLAY, "OBLIGATORY, "Header Rows
              v_mode   TYPE ctu_params-dismode DEFAULT 'A' NO-DISPLAY.
SELECTION-SCREEN END OF BLOCK b1.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_infile.

  CALL FUNCTION 'F4_FILENAME'
    EXPORTING
      program_name  = syst-cprog
      dynpro_number = syst-dynnr
      field_name    = 'p_file'
    IMPORTING
      file_name     = p_infile.
  IF sy-subrc <> 0.
    MESSAGE e031(zmsg_common).
  ENDIF.

START-OF-SELECTION.

  PERFORM upload_xl. "Upload Excel File
  PERFORM fill_fcat_bplog.
* Check whether customers are already created or not
*  PERFORM f_validate_ip.
  PERFORM create_bp_add_role. "Create Business Partner with 2 default Roles
  PERFORM display_log_bp.

*&---------------------------------------------------------------------*
*& Form UPLOAD_XL
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM upload_xl .
  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = p_infile
      i_begin_col             = '1'
      i_begin_row             = '2' "Do not require
*headings
      i_end_col               = '45'
      i_end_row               = '10000'
    TABLES
      intern                  = itab1
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
  IF sy-subrc <> 0.
    MESSAGE e010(zz) WITH TEXT-001. "Problem uploading
*Excel Spreadsheet
  ENDIF.

  LOOP AT itab1 ASSIGNING <fs_xl>.
    CLEAR:gv_index.
    MOVE <fs_xl>-col TO gv_index.
    ASSIGN COMPONENT gv_index OF STRUCTURE gs_data TO <fs_tbl>.
    MOVE <fs_xl>-value TO <fs_tbl>.
    AT END OF row.
      APPEND gs_data TO gt_data.
      CLEAR: gs_data.
    ENDAT.
  ENDLOOP.
  it_file[] = gt_data[].
ENDFORM.
*&---------------------------------------------------------------------*
*& Form FILL_FCAT_BPLOG
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fill_fcat_bplog .
  s_layout-colwidth_optimize = 'X'.
  s_layout-zebra = 'X'.

*  w_fcat-fieldname = 'SERIAL'.
*  w_fcat-seltext_l = 'Serial'.
*  w_fcat-tabname = 'T_LOG'.
*  APPEND w_fcat TO t_fcat.
*  CLEAR w_fcat.

  w_fcat-fieldname = 'MSGTYP'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'Message Type'.
  APPEND w_fcat TO t_fcat.
  CLEAR w_fcat.

*  w_fcat-fieldname = 'MSGNR'.
*  w_fcat-tabname = 'T_LOG'.
*  w_fcat-seltext_l = 'Message No'.
*  APPEND w_fcat TO t_fcat.
*  CLEAR w_fcat.

  w_fcat-fieldname = 'BU_PARTNER'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-no_zero = 'X'.
  w_fcat-seltext_l = 'Business Partner'.
  APPEND w_fcat TO t_fcat.
  CLEAR w_fcat.

  w_fcat-fieldname = 'MSG'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'Message'.
  APPEND w_fcat TO t_fcat.

*  w_fcat-fieldname = 'BPNAME'.
*  w_fcat-tabname = 'T_LOG'.
*  w_fcat-seltext_l = 'Business partner Name'.
*  APPEND w_fcat TO t_fcat.

*  w_fcat-fieldname = 'VENDOR'.
*  w_fcat-tabname = 'T_LOG'.
*  w_fcat-seltext_l = 'Vendor'.
**  w_fcat-
*  APPEND w_fcat TO t_fcat.
*  CLEAR w_fcat.

*  w_fcat-fieldname = 'SORTL'.
*  w_fcat-tabname = 'T_LOG'.
*  w_fcat-seltext_l = 'Search Term 1'.
*  APPEND w_fcat TO t_fcat.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form CREATE_BP_ADD_ROLE
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM create_bp_add_role .

  DATA : lv_error TYPE flag.
  DATA : l_name1 TYPE kna1-name1.
  DATA : ls_bnka TYPE bnka.

  LOOP AT it_file INTO wa_file.
    IF wa_file-bankaccountname IS NOT INITIAL AND
       wa_file-bank_key IS NOT INITIAL.
      CLEAR ls_bnka.
      SELECT SINGLE * FROM bnka INTO ls_bnka
        WHERE banks = wa_file-bank_ctry AND bankl = wa_file-bank_key.
      IF sy-subrc NE 0.
        PERFORM create_bank_key.
      ENDIF.
    ENDIF.

    partnercategory = '2'.
    CLEAR businesspartnerextern.
    businesspartnerextern = wa_file-bpno_ext.
    PERFORM fill_centraldata.
    PERFORM fill_address.
    PERFORM call_bapi_bupa_create USING wa_file CHANGING lv_error.
    IF businesspartner IS NOT INITIAL AND lv_error IS INITIAL.
      PERFORM add_role_bp.
    ELSE.
    ENDIF.
    PERFORM maintain_vendor_s.
*    PERFORM maintain_customer_s.
*    PERFORM maintain_customer_cc.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form DISPLAY_LOG_BP
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_log_bp .
  CHECK t_log IS NOT INITIAL.
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_grid_title = 'Log'
      is_layout    = s_layout
      it_fieldcat  = t_fcat
    TABLES
      t_outtab     = t_log
* EXCEPTIONS
*     PROGRAM_ERROR                     = 1
*     OTHERS       = 2
    .
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF. " IF sy-subrc <> 0
ENDFORM.
*&---------------------------------------------------------------------*
*& Form FILL_CENTRALDATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fill_centraldata .
  centraldata-searchterm1 = wa_file-sterm1.
  centraldata-searchterm2 = wa_file-sterm2.
  centraldata-partnerlanguage = 'E'.
  centraldata-title_key = wa_file-title.
  IF partnercategory = 2.
  ELSE.
    centraldataperson-correspondlanguage = 'E'.
    centraldataperson-correspondlanguageiso = 'EN'.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form FILL_ADDRESS
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fill_address .
  IF partnercategory = 2.
    centraldataorganization-name1 = wa_file-name1.
    centraldataorganization-name2 = wa_file-name2.
  ELSEIF partnercategory = 1.
    centraldataperson-firstname = wa_file-name1.
  ENDIF. " IF partnercategory = 2
  addressdata-c_o_name =     wa_file-c_o.
  addressdata-street =     wa_file-street.
  addressdata-str_suppl1 = wa_file-str_suppl1.
  addressdata-postl_cod1 = wa_file-postl_cod1.
  addressdata-city       = wa_file-city      .
  addressdata-country    = wa_file-country   .
  addressdata-region     = wa_file-region    .
  addressdata-langu      = wa_file-langu     .

  REFRESH it_telephondata.
*For Telphone No
  wa_telephondata-country = wa_file-country.
  wa_telephondata-telephone = wa_file-mob_number.
  wa_telephondata-std_no = 'X'.
*  WA_TELEPHONDATA-EXTENSION = '91'.
  wa_telephondata-r_3_user = '3'.
  wa_telephondata-consnumber = '001'.
  wa_telephondata-home_flag = 'X'.
  APPEND wa_telephondata TO it_telephondata.

*for mobile number
  CLEAR wa_telephondata.
  wa_telephondata-country = wa_file-country.
  wa_telephondata-telephone = wa_file-tel_number.
  wa_telephondata-std_no = 'X'.
*  WA_TELEPHONDATA-EXTENSION = '91'.
  wa_telephondata-r_3_user = '1'.
  wa_telephondata-consnumber = '002'.
  wa_telephondata-home_flag = 'X'.
  APPEND wa_telephondata TO it_telephondata.

  REFRESH it_maildata.
  wa_maildata-e_mail = wa_file-smtp_addr.
  wa_maildata-email_srch = wa_file-smtp_addr2.
  wa_maildata-std_no = 'X'.
  wa_maildata-std_recip = 'X'.
  wa_maildata-home_flag = 'X'.
  wa_maildata-consnumber = '001'.
  APPEND wa_maildata TO it_maildata.

*  REFRESH it_maildata.
  IF wa_file-smtp_addr2 IS NOT INITIAL.
    wa_maildata-e_mail = wa_file-smtp_addr2.
*  wa_maildata-email_srch = wa_file-smtp_addr2.
    wa_maildata-std_no = 'X'.
    wa_maildata-std_recip = 'X'.
    wa_maildata-home_flag = 'X'.
    wa_maildata-consnumber = '001'.
    APPEND wa_maildata TO it_maildata.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form CALL_BAPI_BUPA_CREATE
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> WA_FILE
*&      <-- LV_ERROR
*&---------------------------------------------------------------------*
FORM call_bapi_bupa_create  USING    p_wa_file
                            CHANGING lv_error.
  DATA: tax_ret TYPE TABLE OF bapiret2,
        lv_bp   TYPE bu_partner.

  CLEAR businesspartner.
  CLEAR: lv_error, w_log.

  partnercategory = 2.
  partnergroup = wa_file-ktokd.
  lv_bp =  wa_file-sterm1.

  CALL FUNCTION 'BAPI_BUPA_CREATE_FROM_DATA'
    EXPORTING
      businesspartnerextern   = businesspartnerextern
      partnercategory         = partnercategory
      partnergroup            = partnergroup
      centraldata             = centraldata
      centraldataperson       = centraldataperson
      centraldataorganization = centraldataorganization
      addressdata             = addressdata
    IMPORTING
      businesspartner         = businesspartner
    TABLES
      telefondata             = it_telephondata
      e_maildata              = it_maildata
      return                  = return.
  LOOP AT return INTO lwa_return WHERE type CA 'EA'.
    w_log-sortl = lv_bp.
    w_log-bu_partnerx = 'B'.
    w_log-msg  =  lwa_return-message.
    w_log-msgtyp = lwa_return-type.
    w_log-msgnr = lwa_return-number.
    w_log-uzeit = sy-uzeit.
    w_log-erdat = sy-datum.
    w_log-uname = sy-uname.
    APPEND w_log TO t_log.
*    INSERT zbp_upload FROM w_log.
*    APPEND w_log to t_Log.
    CLEAR w_log.
    lv_error = abap_true.
  ENDLOOP.
  IF lv_error IS NOT INITIAL.
    ROLLBACK WORK.
  ENDIF.
  IF businesspartner IS NOT INITIAL.
    IF lv_error IS INITIAL.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
    ENDIF.
*    w_log-vendor = businesspartner.
    w_log-bu_partner = businesspartner.
    w_log-bu_partnerx = 'B'.
    READ TABLE return INTO DATA(wa) WITH KEY type = 'E'.
    IF sy-subrc = 0.
      w_log-msg  = 'Business Partner Num Generated/Not Created'.
      w_log-msgnr = '002'.
    ELSE.
      w_log-msg  = 'Business Partner Created'.
      w_log-customer = 'Vendor No is'.
      w_log-msgnr = '001'.
    ENDIF.
    APPEND w_log TO t_log.
*    INSERT zbp_upload FROM w_log.
    CLEAR w_log.
  ENDIF.
*  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*    EXPORTING
*      input  = businesspartner
*    IMPORTING
*      output = businesspartnerextern.

  IF businesspartnerextern IS NOT INITIAL.
    businesspartner =  businesspartnerextern.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form ADD_ROLE_BP
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM add_role_bp .
  DATA businesspartnerrolecategory TYPE bapibus1006_bproles-partnerrolecategory. " BP Role Category
  DATA all_businesspartnerroles TYPE bapibus1006_x-mark. " Data element for domain BOOLE: TRUE (='X') and FALSE (=' ')
  DATA businesspartnerrole TYPE bapibus1006_bproles-partnerrole. " BP Role
  DATA differentiationtypevalue TYPE bapibus1006_bproles-difftypevalue. " BP: Differentiation type value
  DATA validfromdate               TYPE bapibus1006_bprole_validity-bprolevalidfrom.
  DATA validuntildate              TYPE bapibus1006_bprole_validity-bprolevalidto.
  DATA return TYPE STANDARD TABLE OF bapiret2. " Return Parameter
*&---------------------------------------------------------------------*
*&    Add Vendor Roles
*&---------------------------------------------------------------------*

  DATA : lv_rltyp TYPE but100-rltyp.

  businesspartnerrole = 'FLVN00'.
*  businesspartnerrolecategory =  'FLVN00'.          "'FLCU00'.
  CALL FUNCTION 'BAPI_BUPA_ROLE_ADD_2'
    EXPORTING
      businesspartner             = businesspartner
      businesspartnerrolecategory = businesspartnerrolecategory
      all_businesspartnerroles    = ' '
      businesspartnerrole         = businesspartnerrole
      differentiationtypevalue    = differentiationtypevalue
*     VALIDFROMDATE               = P_DATE
      validuntildate              = '99991231'
    TABLES
      return                      = return.
  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = 'X'.

  DO 5 TIMES.
    CLEAR lv_rltyp.
    SELECT SINGLE rltyp INTO lv_rltyp FROM but100 WHERE partner = businesspartner
                                                    AND rltyp = 'FLVN00'.

    IF lv_rltyp IS INITIAL.
      WAIT UP TO 1 SECONDS.
    ELSE.
      CONTINUE.
    ENDIF.
  ENDDO.
  businesspartnerrole = 'ZVEND'.
*  businesspartnerrolecategory =  'FLVN00'.          "'FLCU00'.
  CALL FUNCTION 'BAPI_BUPA_ROLE_ADD_2'
    EXPORTING
      businesspartner             = businesspartner
      businesspartnerrolecategory = businesspartnerrolecategory
      all_businesspartnerroles    = ' '
      businesspartnerrole         = businesspartnerrole
      differentiationtypevalue    = differentiationtypevalue
*     VALIDFROMDATE               = P_DATE
      validuntildate              = '99991231'
    TABLES
      return                      = return.
  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = 'X'.

  DO 5 TIMES.
    CLEAR lv_rltyp.
    SELECT SINGLE rltyp INTO lv_rltyp FROM but100 WHERE partner = businesspartner
                                                    AND rltyp = 'FLVN00'.

    IF lv_rltyp IS INITIAL.
      WAIT UP TO 1 SECONDS.
    ELSE.
      CONTINUE.
    ENDIF.
  ENDDO.
  businesspartnerrole = 'FLVN01'.                   "'FLCU01'.
*  businesspartnerrolecategory = 'FLVN01'.                   "'FLCU01'.
  CALL FUNCTION 'BAPI_BUPA_ROLE_ADD_2'
    EXPORTING
      businesspartner             = businesspartner
      businesspartnerrolecategory = businesspartnerrolecategory
      all_businesspartnerroles    = ' '
      businesspartnerrole         = businesspartnerrole
      differentiationtypevalue    = differentiationtypevalue
*     VALIDFROMDATE               = P_DATE
      validuntildate              = '99991231'
    TABLES
      return                      = return.
  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = 'X'.

  DO 5 TIMES.
    CLEAR lv_rltyp.
    SELECT SINGLE rltyp INTO lv_rltyp FROM but100 WHERE partner = businesspartner
                                                    AND rltyp = 'FLVN01'.

    IF lv_rltyp IS INITIAL.
      WAIT UP TO 1 SECONDS.
    ELSE.
      CONTINUE.
    ENDIF.
  ENDDO.
*  IF wa_file-ktokd = 'ZV05'.
*    businesspartnerrole = 'FLCU00'.                       "'FLVN00'.
*    businesspartnerrolecategory = 'FLCU00'.                       "'FLVN00'.
*    CALL FUNCTION 'BAPI_BUPA_ROLE_ADD_2'
*      EXPORTING
*        businesspartner             = businesspartner
*        businesspartnerrolecategory = businesspartnerrolecategory
*        all_businesspartnerroles    = ' '
*        businesspartnerrole         = businesspartnerrole
*        differentiationtypevalue    = differentiationtypevalue
**       VALIDFROMDATE               = P_DATE
*        validuntildate              = '99991231'
*      TABLES
*        return                      = return.
*    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*      EXPORTING
*        wait = 'X'.
*
*    DO 5 TIMES.
*      CLEAR lv_rltyp.
*      SELECT SINGLE rltyp INTO lv_rltyp FROM but100 WHERE partner = businesspartner
*                                                      AND rltyp = 'FLCU00'.
*
*      IF lv_rltyp IS INITIAL.
*        WAIT UP TO 1 SECONDS.
*      ELSE.
*        CONTINUE.
*      ENDIF.
*    ENDDO.
**
*    businesspartnerrole =  'FLCU01'.                            " 'FLVN01'.
*    businesspartnerrolecategory =  'FLCU01'.                            " 'FLVN01'.
*    CALL FUNCTION 'BAPI_BUPA_ROLE_ADD_2'
*      EXPORTING
*        businesspartner             = businesspartner
*        businesspartnerrolecategory = businesspartnerrolecategory
*        all_businesspartnerroles    = ' '
*        businesspartnerrole         = businesspartnerrole
*        differentiationtypevalue    = differentiationtypevalue
**       VALIDFROMDATE               = P_DATE
*        validuntildate              = '99991231'
*      TABLES
*        return                      = return.
*    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*      EXPORTING
*        wait = 'X'.
*
*    DO 5 TIMES.
*      CLEAR lv_rltyp.
*      SELECT SINGLE rltyp INTO lv_rltyp FROM but100 WHERE partner = businesspartner
*                                                      AND rltyp = 'FLCU01'.
*
*      IF lv_rltyp IS INITIAL.
*        WAIT UP TO 1 SECONDS.
*      ELSE.
*        CONTINUE.
*      ENDIF.
*    ENDDO.
*
*  ENDIF.
*
*  businesspartnerrole =  'UKM000'.
*  businesspartnerrolecategory =  'UKM000'.
*  CALL FUNCTION 'BAPI_BUPA_ROLE_ADD_2'
*    EXPORTING
*      businesspartner             = businesspartner
*      businesspartnerrolecategory = businesspartnerrolecategory
*      all_businesspartnerroles    = ' '
*      businesspartnerrole         = businesspartnerrole
*      differentiationtypevalue    = differentiationtypevalue
**     VALIDFROMDATE               = P_DATE
*      validuntildate              = '99991231'
*    TABLES
*      return                      = return.
*  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*    EXPORTING
*      wait = 'X'.
*
*  DO 5 TIMES.
*    CLEAR lv_rltyp.
*    SELECT SINGLE rltyp INTO lv_rltyp FROM but100 WHERE partner = businesspartner
*                                                    AND rltyp = 'UKM000'.
*
*    IF lv_rltyp IS INITIAL.
*      WAIT UP TO 1 SECONDS.
*    ELSE.
*      CONTINUE.
*    ENDIF.
*  ENDDO.
*

  SELECT *  FROM but000  INTO TABLE it_but000 WHERE partner = businesspartner.

  SELECT * FROM cvi_vend_link INTO TABLE it_cvi_vend_link FOR ALL ENTRIES IN it_but000 WHERE partner_guid = it_but000-partner_guid.

  READ TABLE it_cvi_vend_link INTO wa_cvi_vend_link INDEX 1.

  w_log-vendor = wa_cvi_vend_link-vendor.
  MODIFY t_log FROM w_log TRANSPORTING vendor customer WHERE
        bu_partner = businesspartner.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form F_VALIDATE_IP
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM f_validate_ip .
  TYPES : BEGIN OF lty_kna1,
            kunnr TYPE kunnr,
            name1 TYPE name1,
            sortl TYPE sortl,
          END OF lty_kna1.

  DATA : lt_kna1  TYPE TABLE OF lty_kna1,
         lwa_kna1 TYPE lty_kna1.

  SELECT kunnr name1 sortl
  FROM kna1
  INTO TABLE lt_kna1
  FOR ALL ENTRIES IN it_file
  WHERE sortl EQ it_file-sterm1.

  IF sy-subrc EQ 0.
    LOOP AT it_file INTO wa_file.
      CLEAR lwa_kna1.
      READ TABLE lt_kna1 INTO lwa_kna1 WITH KEY sortl = wa_file-sterm1.
      IF sy-subrc EQ 0.
        DELETE it_file.
        CLEAR w_log.
        w_log-msg = TEXT-008.
        w_log-bu_partner = lwa_kna1-kunnr.
        w_log-bpname = lwa_kna1-name1.
        w_log-sortl = wa_file-sterm1.
        w_log-msgtyp = 'W'.
        APPEND w_log TO t_log.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form UPLOAD_XL_vendor_s
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM upload_xl_vendor_s .

ENDFORM.
*&---------------------------------------------------------------------*
*& Form FILL_FCAT_vendor_s_LOG
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fill_fcat_vendor_s_log .
  s_layout-colwidth_optimize = 'X'.
  s_layout-zebra = 'X'.

  w_fcat-fieldname = 'MSGTYP'.
  w_fcat-seltext_l = 'Message Type'.
  w_fcat-tabname = 'T_LOG'.
  APPEND w_fcat TO t_fcat.
  CLEAR w_fcat.

  w_fcat-fieldname = 'MSGNR'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'Message No'.
  APPEND w_fcat TO t_fcat.
  CLEAR w_fcat.

  w_fcat-fieldname = 'BU_PARTNER'.
  w_fcat-no_zero = 'X'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'vendor'.
  APPEND w_fcat TO t_fcat.
  CLEAR w_fcat.

  w_fcat-fieldname = 'MSG'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'Message'.
  APPEND w_fcat TO t_fcat.

  w_fcat-fieldname = 'BPNAME'.
  w_fcat-tabname = 'T_LOG'.
  w_fcat-seltext_l = 'Vendor Name'.
  APPEND w_fcat TO t_fcat.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form MAINTAIN_VENDOR_S
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM maintain_vendor_s .""""""""""""" for vendor
  DATA: lt_contacts      TYPE vmds_ei_contacts_t,
        ls_contacts      TYPE vmds_ei_contacts,       " Ext. Interface: Contact Person
        lt_vendors       TYPE vmds_ei_extern_t,
        ls_vendors       TYPE vmds_ei_extern,         " Complex External Interface for Vendors
        ls_bankvendors   TYPE cvis_ei_cvi_bankdetail, " Bank Details for Vendors
        lt_bankvendors   TYPE cvis_ei_bankdetail_t,   " Bank Details for Vendors
        ls_vendorwtype   TYPE vmds_ei_wtax_type,      " Bank Details for Vendors
        ls_address       TYPE cvis_ei_address1,       " Ext. Interface: Address of Organization
        ls_purchas_data  TYPE vmds_ei_vmd_purchasing, " Ext. Interface: Purchasing Data
        lt_purchasing    TYPE vmds_ei_purchasing_t,
        ls_purchasing    TYPE vmds_ei_purchasing,     " Ext. Interface: Purchasing Organization
        lt_purch_func    TYPE vmds_ei_functions_t,
        ls_purch_func    TYPE vmds_ei_functions,      " Ext. Interface: Partner Roles
        ls_message       TYPE cvis_message,           " Error Indicator and System Messages
        lv_contactid     TYPE bapicontact_01-contact, " Number of contact person
        gs_vmds_extern   TYPE vmds_ei_main,           " Ext. Interface: Vendor Total Data
        gs_succ_messages TYPE cvis_message,           " Error Indicator and System Messages
        gs_vmds_error    TYPE vmds_ei_main,           " Ext. Interface: Vendor Total Data
        gs_err_messages  TYPE cvis_message,           " Error Indicator and System Messages
        gs_vmds_succ     TYPE vmds_ei_main,           " Ext. Interface: Vendor Total Data
        gv_ktokk         TYPE ktokk,                  " Vendor account group
        gv_ccode         TYPE bukrs,                  " Company Code
        gv_akont         TYPE akont,                  " Reconciliation Account in General Ledger
        gv_name          TYPE name1.                  " Name
  DATA is_master_data TYPE cmds_ei_main. " Ext. Interface: Total Customer Data
  DATA es_master_data_correct TYPE cmds_ei_main. " Ext. Interface: Total Customer Data
  DATA es_message_correct TYPE cvis_message. " Error Indicator and System Messages
  DATA es_master_data_defective TYPE cmds_ei_main. " Ext. Interface: Total Customer Data
  DATA es_message_defective TYPE cvis_message. " Error Indicator and System Messages

  DATA: lt_company      TYPE vmds_ei_company_t,
        ls_company      TYPE vmds_ei_company,        " Ext. Interface: Company Code Data
        ls_company_data TYPE vmds_ei_vmd_company.   " Ext. Interface: Company Code Data

** With-holding Tax --*
  DATA: lt_whtax TYPE vmds_ei_wtax_type_t,
        ls_whtax TYPE vmds_ei_wtax_type.


  DATA: lw_bupa TYPE bu_partner.
  DATA: lt_return TYPE STANDARD TABLE OF bapiret2.
  DATA: lw_details TYPE bapibus1006_bankdetail.
  DATA: ls_lfbk TYPE lfbk.
  DATA: detail TYPE bapibus1006_head-bankdetailid.

*  loop at it_file into wa_file.
*
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = w_log-vendor
    IMPORTING
      output = lw_bupa.

  businesspartner = lw_bupa.
  """""""""""""""""""for tax""""""'
  CALL FUNCTION 'BAPI_BUPA_TAX_ADD'
    EXPORTING
      businesspartner = lw_bupa
      taxtype         = wa_file-taxtyp1
      taxnumber       = wa_file-taxnum1
    TABLES
      return          = lt_return.

  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = ''.
  COMMIT WORK AND WAIT.
  WAIT UP TO 1 SECONDS.

  CLEAR: lt_return, lw_details.
  lw_details-bank_ctry  = wa_file-bank_ctry.
  lw_details-bank_acct  = wa_file-bank_acct.
  lw_details-bank_key   = wa_file-bank_key.
  lw_details-ctrl_key = wa_file-ctrl_key.
  lw_details-accountholder = wa_file-accountholder.
  lw_details-bankaccountname = wa_file-bankaccountname.

  CALL FUNCTION 'BAPI_BUPA_BANKDETAIL_ADD'
    EXPORTING
      businesspartner = lw_bupa
      bankdetailid    = '0001'
      bankdetaildata  = lw_details
    IMPORTING
      bankdetailidout = detail
    TABLES
      return          = lt_return.

  .
*  CALL FUNCTION 'BAPI_BUPA_BANKDETAIL_ADD'
*    EXPORTING
*      businesspartner = lw_bupa
*      bankdetailid    = '0001'
*      bankdetaildata  = lw_details
*    TABLES
*      return          = lt_return.

*IF RETURN[] IS INITIAL.

*CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.

*ENDIF.
  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = ''.
  COMMIT WORK AND WAIT.
  WAIT UP TO 1 SECONDS.

  CLEAR: lw_details.
  CLEAR: lt_return.
  """""""""""""""""""""""""""""""
*  SELECT SINGLE * FROM but000 WHERE partner = w_filev-lifnr.

  SELECT SINGLE * FROM lfa1 WHERE lifnr =  lw_bupa.
  IF sy-subrc = 0.
*   Clear the work area initially.
    CLEAR gs_vmds_extern.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = w_log-vendor
      IMPORTING
        output = ls_vendors-header-object_instance-lifnr.

    ls_vendors-header-object_task = 'U'. "Represents Insert or Create

*    ls_bankvendors-task = 'I'.
*    ls_bankvendors-data_key-banks = 'IN'.
*    ls_bankvendors-data_key-bankn = wa_file-bankn.
*    ls_bankvendors-data_key-bankl = wa_file-bankl.
*
*    append ls_bankvendors to lt_bankvendors.
*
*    ls_vendors-central_data-bankdetail-bankdetails = lt_bankvendors[].

    ls_address-postal-data-name          = lfa1-name1. "Name of the Vendor
    ls_address-postal-data-country       = lfa1-land1.
    ls_address-postal-datax-name         = 'X'.
    ls_address-postal-datax-country      = 'X'.
    ls_address-task                      = 'U'.

*   Set the Address for the Vendor
    ls_vendors-central_data-address = ls_address.
    CLEAR: lt_purchasing[],lt_vendors.
*&---------------------------------------------------------------------*
*&  *   Set the Purchasing Data
*&---------------------------------------------------------------------*
    IF wa_file-vkorg IS NOT INITIAL.
*BREAK-POINT.
      "------------------------------------
*      ls_purch_func-data_key-parvw  = 'OA' . ""-data_key-ekorg = wa_file-vkorg. "Purchasing Organization
*      ls_purch_func-datax  = 'OA' . ""-data_key-ekorg = wa_file-vkorg. "Purchasing Organization
*
*      ls_purchasing-functions-functions[]          = lt_purch_func[] . "  'M'."'U'.
      CLEAR: lt_purch_func[].
      CLEAR ls_purch_func.
      ls_purch_func-task = 'M'.
      ls_purch_func-data_key-parvw    = 'BA'.  "OA
*   We set the Vendor being created as “Ordering Address”
      ls_purch_func-data-partner      = ls_vendors-header-object_instance-lifnr. "ls_vendors-header-object_instance-lifnr
      ls_purch_func-datax-partner     = 'X'.
      APPEND ls_purch_func TO lt_purch_func[].

      ls_purchasing-functions-functions  = lt_purch_func[].

*   Set the Account Group
      ls_vendors-central_data-central-data-ktokk  = wa_file-ktokd.  "'ZV01' . "gv_ktokk.
*    ls_vendors-central_data-central-data-stcd1  = ‘VAT 1’.
*    ls_vendors-central_data-central-data-brsch  = ’18’.                 “Industry Key
*   Set the DATAX flags
      ls_vendors-central_data-central-datax-ktokk = 'X'.
*    ls_vendors-central_data-central-datax-stcd1 = ‘X’.
*    ls_vendors-central_data-central-datax-brsch = ‘X’.
      "--------------

      ls_purchasing-task           = 'I'."'U'.
      ls_purchasing-data_key-ekorg = wa_file-vkorg. "Purchasing Organization

      ls_purchasing-data-waers = wa_file-waers.
      ls_purchasing-datax-waers = 'X'.

      ls_purchasing-data-zterm = wa_file-zterm.

      ls_purchasing-datax-zterm = 'X'.
*
      ls_purchasing-data-lfabc = '1' . "wa_file-lfabc.
      ls_purchasing-datax-lfabc = 'X'.

      ls_purchasing-data-inco1 = wa_file-inco1.
      ls_purchasing-datax-inco1 = 'X'.

      ls_purchasing-data-inco2 = wa_file-inco2.
      ls_purchasing-datax-inco2 = 'X'.

      ls_purchasing-data-kalsk  = wa_file-kalsk. "Schema Group, Vendor
      ls_purchasing-datax-kalsk = 'X'.

      ls_purchasing-data-webre  = wa_file-webre . "GR Based Invoice Verification
      ls_purchasing-datax-webre = 'X'.

      ls_purchasing-data-verkf = ' '.
      ls_purchasing-datax-verkf = 'X'.


      ls_purchasing-data-telf1 = ' '.
      ls_purchasing-datax-telf1 = 'X'.

      ls_purchasing-data-vsbed = ' '.
      ls_purchasing-datax-vsbed = 'X'.

      ls_purchasing-data-lebre  = wa_file-lebre . "Search Based Invoice Verification
*      ls_purchasing-data-lebre = ' '.
      ls_purchasing-datax-lebre = 'X'.

      ls_purchasing-data-ekgrp  = wa_file-ekgrp . "Pur grp
*      ls_purchasing-data-ekgrp = ' '.
      ls_purchasing-datax-ekgrp = 'X'.

      ls_purchasing-data-plifz = ' '.
      ls_purchasing-datax-plifz = 'X'.

      APPEND ls_purchasing TO lt_purchasing.

*   Set the Purchasing Data
      ls_purchas_data-purchasing = lt_purchasing[].

      ls_vendors-purchasing_data = ls_purchas_data.
    ENDIF. " IF wa_file-vkorg IS NOT INITIAL
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    IF wa_file-bukrs IS NOT INITIAL.

      REFRESH: lt_company[],lt_vendors.
      CLEAR: ls_company_data.
      CLEAR ls_company.
      ls_company-task            = 'I'.
      ls_company-data_key-bukrs  = wa_file-bukrs.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = wa_file-akont
        IMPORTING
          output = ls_company-data-akont.
      ls_company-data-zterm  = wa_file-zterm.
      ls_company-data-reprf  = 'X'.
      ls_company-datax-akont = 'X'.
      ls_company-datax-zterm = 'X'.
      ls_company-datax-reprf  = 'X'.
*&#- --    With-holding Tax --*
      IF wa_file-whtx_ty_inv IS NOT INITIAL.
        ls_whtax-task             = 'I'.
        ls_whtax-data_key-witht   = wa_file-whtx_ty_inv.
        ls_whtax-data-wt_withcd   = wa_file-whtx_cd_inv.
        ls_whtax-data-wt_subjct   = 'X'.
        ls_whtax-datax-wt_withcd  = 'X'.
        ls_whtax-datax-wt_subjct  = 'X'.
        APPEND ls_whtax TO lt_whtax.
      ENDIF.
      IF wa_file-whtx_ty_pym IS NOT INITIAL.
        ls_whtax-task             = 'I'.
        ls_whtax-data_key-witht   = wa_file-whtx_ty_pym.
        ls_whtax-data-wt_withcd   = wa_file-whtx_cd_pym.
        ls_whtax-data-wt_subjct   = 'X'.
        ls_whtax-datax-wt_withcd  = 'X'.
        ls_whtax-datax-wt_subjct  = 'X'.
        APPEND ls_whtax TO lt_whtax.
      ENDIF.
      IF lt_whtax[] IS NOT INITIAL.
        ls_company-wtax_type-wtax_type = lt_whtax[].
      ENDIF.
*&% End -- With-holding Tax --*

      APPEND ls_company TO lt_company.
      ls_company_data-company = lt_company[].
      ls_vendors-company_data = ls_company_data.

      """""""""""""""""""""""""""""""""""""""
      IF wa_file-cert_id IS NOT INITIAL.

        wa_msme-bukrs = wa_file-bukrs.
        wa_msme-lifnr = lw_bupa.
        wa_msme-cert_id = wa_file-cert_id.
        wa_msme-cert_no = wa_file-cert_no.

*        wa_msme-valid_from = wa_file-valid_from.
*        wa_msme-valid_to = wa_file-valid_to.
*        wa_msme-reg_city = wa_file-reg_city.
*        IF wa_file-valid_to IS NOT INITIAL.
*          CONCATENATE wa_file-valid_to+6(4) wa_file-valid_to+3(2) wa_file-valid_to+0(2)
*                  INTO wa_msme-valid_to.
*        ENDIF.
*        IF wa_file-valid_from IS NOT INITIAL.
*          CONCATENATE wa_file-valid_from+6(4) wa_file-valid_from+3(2) wa_file-valid_from+0(2)
*                  INTO wa_msme-valid_from.
*        ENDIF.

        wa_msme-main_cert = wa_file-main_cr.
        CONDENSE wa_msme-main_cert.
*        CASE wa_file-status.
*          WHEN 'Active'.
*            wa_msme-status = 'A'.
*          WHEN 'Inactive'.
*            wa_msme-status = 'O'.
*          WHEN 'Deleted'.
*            wa_msme-status = 'D'.
*          WHEN 'Exempted'.
*            wa_msme-status = 'E'.
*          WHEN OTHERS.
*        ENDCASE.
*        CONDENSE wa_msme-status.

        APPEND wa_msme TO it_msme.
        CLEAR wa_msme.
      ENDIF.

*&% End -- MSME data --*

    ENDIF.
    APPEND ls_vendors TO lt_vendors.
*   Set the Final Vendor Data based on which it has to be created
    gs_vmds_extern-vendors = lt_vendors[].
    vmd_ei_api=>initialize( ).
*   Call the Method for creation of Vendor.
    CALL METHOD vmd_ei_api=>maintain_bapi
      EXPORTING
        is_master_data           = gs_vmds_extern
      IMPORTING
        es_master_data_correct   = gs_vmds_succ
        es_message_correct       = gs_succ_messages
        es_master_data_defective = gs_vmds_error
        es_message_defective     = gs_err_messages.

    IF gs_err_messages-is_error IS INITIAL.
      COMMIT WORK.
      WAIT UP TO 1 SECONDS.
      w_log-bu_partner = lw_bupa.
      w_log-vendor = w_log-vendor.
      w_log-bu_partnerx = 'V'.
      w_log-msg  = 'Vendor Extended' .
      w_log-msgtyp = 'S'.
      w_log-msgnr = '001'.
      w_log-uzeit = sy-uzeit.
      w_log-erdat = sy-datum.
      w_log-uname = sy-uname.
      w_log-bpname = lfa1-name1.
*        w_log-serial = wa_file-serial.
      APPEND w_log TO t_log.
*      INSERT zbp_upload FROM w_log.
      CLEAR w_log.

      SELECT SINGLE * FROM lfb1 WHERE lifnr = lfa1-lifnr.
        IF sy-subrc EQ 0.
          UPDATE lfb1 SET zwels = wa_file-zwels
          WHERE lifnr = lfa1-lifnr.
        ENDIF.

    ELSE. " ELSE -> IF gs_err_messages-is_error IS INITIAL
      LOOP AT gs_err_messages-messages INTO DATA(wa).
        w_log-bu_partner = lw_bupa.
        w_log-vendor = w_log-vendor.
        w_log-bu_partnerx = 'V'.
        w_log-msg  = wa-message.
        w_log-msgtyp = wa-type.
        w_log-msgnr = wa-number.
        w_log-uzeit = sy-uzeit.
        w_log-erdat = sy-datum.
        w_log-uname = sy-uname.
        w_log-bpname = lfa1-name1.
*          w_log-serial = wa_file-serial.
        APPEND w_log TO t_log.
*        INSERT zbp_upload FROM w_log.
        CLEAR w_log.
      ENDLOOP.
    ENDIF.
    SELECT SINGLE bpext INTO @DATA(lv_bpext) FROM but000 WHERE partner = @w_log-vendor.
    SELECT SINGLE calendarid INTO @DATA(lv_calendarid) FROM bp001 WHERE partner = @w_log-vendor.
**    IF lv_BPEXT IS INITIAL AND
**       lv_CALENDARID IS INITIAL.
***      PERFORM call_bdc.
**    ENDIF.
    IF lv_bpext IS INITIAL.
      UPDATE but000 SET bpext = wa_file-bpext
          WHERE partner = businesspartner.
    ENDIF.
    IF lv_calendarid IS INITIAL.
      UPDATE bp001 SET calendarid = wa_file-calendarid
          WHERE partner = businesspartner.
    ENDIF.

*& Update PAN

    UPDATE lfa1 SET j_1ipanno = wa_file-panno
          WHERE lifnr = lw_bupa.

*IF wa_file-cin IS NOT INITIAL.
*    UPDATE lfa1 SET j_1ipanno = wa_file-cin
*      WHERE lifnr = lw_bupa.
*endif.
*     IF wa_file-eou IS NOT INITIAL.
*      UPDATE lfa1 SET j_1iexcive = wa_file-eou    "09 aug
*    WHERE lifnr = lw_bupa.
*    ENDIF.

*& Update PAN
    UPDATE lfa1 SET j_1ivtyp = wa_file-j_1ivtyp
      WHERE lifnr = lw_bupa.
    COMMIT WORK AND WAIT.
    IF it_msme IS NOT INITIAL.
      MODIFY idsau_cr_data FROM TABLE it_msme.
      COMMIT WORK AND WAIT.
    ENDIF.

  ELSE.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form call_bdc
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
*FORM call_bdc .
*  PERFORM bdc_dynpro      USING 'SAPLBUS_LOCATOR' '3000'.
*  PERFORM bdc_field       USING 'BDC_OKCODE'
*                                '=SCREEN_1000_OPEN'.
*  PERFORM bdc_field       USING 'BDC_CURSOR'
*                                'BUS_LOCA_SRCH01-SEARCH_TYPE'.
*  PERFORM bdc_field       USING 'BUS_LOCA_SRCH01-SEARCH_TYPE'
*                                '1'.
*  PERFORM bdc_field       USING 'BUS_LOCA_SRCH01-SEARCH_ID'
*                                '1'.
*
* bdc_field       USING 'BUS_JOEL_SEARCH-PARTNER_NUMBER'
*                                        '10058'.
*  PERFORM bdc_field       USING 'BUS_LOCA_SRCH01-MAXHIT'
*                                '100'.
*  PERFORM bdc_dynpro      USING 'SAPLBUPA_DIALOG_JOEL' '1600'.
*  PERFORM bdc_field       USING 'BDC_OKCODE'
*                                '=BUS_MAIN_ENTER'.
*  PERFORM bdc_field       USING 'BDC_CURSOR'
*                                'BUS_JOEL_MAIN-OPEN_NUMBER'.
*  PERFORM bdc_field       USING 'BUS_JOEL_MAIN-OPEN_NUMBER'                businesspartner.
**                                                           '160004'.
*  PERFORM bdc_dynpro      USING 'SAPLBUS_LOCATOR' '3000'.
*  PERFORM bdc_field       USING 'BDC_OKCODE'
*                                '=SCREEN_1110_CHG_ROLE'.
*  PERFORM bdc_field       USING 'BDC_CURSOR'
*                                'BUS_JOEL_MAIN-PARTNER_ROLE'.
*  PERFORM bdc_field       USING 'BUS_JOEL_MAIN-PARTNER_ROLE'
*                                'ZVEND X'.
*  PERFORM bdc_field       USING 'BUS_JOEL_MAIN-PARTNER_TIMEDEP'
*                                '000001'.
*  PERFORM bdc_dynpro      USING 'SAPLBUS_LOCATOR' '3000'.
*  PERFORM bdc_field       USING 'BDC_OKCODE'
*                                '=SCREEN_1100_TAB_03'.
*  PERFORM bdc_field       USING 'BUS_JOEL_MAIN-PARTNER_ROLE'
*                                'ZVEND X'.
*  PERFORM bdc_field       USING 'BUS_JOEL_MAIN-PARTNER_TIMEDEP'
*                                '000001'.
*  PERFORM bdc_field       USING 'BDC_CURSOR'
*                                'BUS000FLDS-TITLE_MEDI'.
*  PERFORM bdc_dynpro      USING 'SAPLBUS_LOCATOR' '3000'.
*  PERFORM bdc_field       USING 'BDC_OKCODE'
*                                '=SCREEN_1000_ACTIVITY'.
*  PERFORM bdc_field       USING 'BDC_CURSOR'
*                                'BUS_JOEL_MAIN-PARTNER_ROLE'.
*  PERFORM bdc_field       USING 'BUS_JOEL_MAIN-PARTNER_ROLE'
*                                'ZVEND X'.
*  PERFORM bdc_field       USING 'BUS_JOEL_MAIN-PARTNER_TIMEDEP'
*                                '000001'.
*  PERFORM bdc_dynpro      USING 'SAPLBUS_LOCATOR' '3000'.
*  PERFORM bdc_field       USING 'BDC_OKCODE'
*                                '=BUS_MAIN_ENTER'.
*  PERFORM bdc_field       USING 'BUS_JOEL_MAIN-PARTNER_ROLE'
*                                'ZVEND X'.
*  PERFORM bdc_field       USING 'BUS_JOEL_MAIN-PARTNER_TIMEDEP'
*                                '000001'.
*  PERFORM bdc_field       USING 'BUS000FLDS-LOCATION_3'
*                                '0'.
*  PERFORM bdc_field       USING 'GS_BP001-CALENDARID'   wa_file-calendarid.
**                                'IN'.
*  PERFORM bdc_field       USING 'BDC_CURSOR'
*                                'BUT000-BPEXT'.
*  PERFORM bdc_field       USING 'BUT000-BPEXT'             wa_file-bpext.
**                                '166666'.
*  PERFORM bdc_dynpro      USING 'SAPLBUS_LOCATOR' '3000'.
*  PERFORM bdc_field       USING 'BDC_OKCODE'
*                                '=BUS_MAIN_SAVE'.
*  PERFORM bdc_field       USING 'BUS_JOEL_MAIN-PARTNER_ROLE'
*                                'ZVEND X'.
*  PERFORM bdc_field       USING 'BUS_JOEL_MAIN-PARTNER_TIMEDEP'
*                                '000001'.
*  PERFORM bdc_field       USING 'BUS000FLDS-LOCATION_3'
*                                '0'.
*  PERFORM bdc_field       USING 'GS_BP001-CALENDARID'   wa_file-calendarid.
**                                'IN'.
*  PERFORM bdc_field       USING 'BDC_CURSOR'
*                                'BUT000-BPEXT'.
*  PERFORM bdc_field       USING 'BUT000-BPEXT'             wa_file-bpext.
**                                '166666'.
**  PERFORM bdc_transaction USING 'BP'.
*  CALL TRANSACTION 'BP' USING bdcdata  MODE 'A' UPDATE 'S' MESSAGES INTO gt_messages.
*
*ENDFORM.
*&---------------------------------------------------------------------*
*& Form MAINTAIN_CUSTOMER_S
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM maintain_customer_s .
  DATA is_master_data TYPE cmds_ei_main. " Ext. Interface: Total Customer Data
  DATA es_master_data_correct TYPE cmds_ei_main. " Ext. Interface: Total Customer Data
  DATA es_message_correct TYPE cvis_message. " Error Indicator and System Messages
  DATA es_master_data_defective TYPE cmds_ei_main. " Ext. Interface: Total Customer Data
  DATA es_message_defective TYPE cvis_message. " Error Indicator and System Messages

  DATA: lt_customers    TYPE cmds_ei_extern_t,
        ls_customers    TYPE cmds_ei_extern,         " Complex External Interface for Customers
        ls_address      TYPE cvis_ei_address1,       " Ext. Interface: Address of Organization
        ls_sales_data   TYPE cmds_ei_cmd_sales,      " Ext. Interface: Sales Data
        ls_central_data TYPE cmds_ei_central_data,   " External Interface: Central Data
        lt_sales        TYPE cmds_ei_sales_t,
        ls_sales        TYPE cmds_ei_sales,          " Ext. Interface: Sales Data
        lt_sales_func   TYPE cmds_ei_functions_t,
        ls_sales_func   TYPE cmds_ei_functions,      " Ext. Interface: Partner Roles
        ls_tax_data     TYPE cmds_ei_tax_ind,        " Ext. Interface: Tax Indicators
        lt_tax_data     TYPE cmds_ei_tax_ind_t,
        ls_message      TYPE cvis_message,           " Error Indicator and System Messages
        lv_contactid    TYPE bapicontact_01-contact. " Number of contact person
  DATA:
    lt_company      TYPE cmds_ei_company_t,
    ls_company      TYPE cmds_ei_company,        " Ext. Interface: Company Code Data
    ls_company_data TYPE cmds_ei_cmd_company.    " Ext. Interface: Company Code Data

*   Clear the work area initially.
  REFRESH lt_tax_data.
  REFRESH is_master_data-customers.
  REFRESH lt_customers[].
  REFRESH lt_sales[].
  REFRESH lt_sales_func.
  CLEAR ls_tax_data.
  CLEAR ls_sales_func.
  CLEAR ls_customers.
  CLEAR ls_address.
  CLEAR is_master_data.
  CLEAR ls_sales_data.
  CLEAR lt_sales     .
  CLEAR ls_sales     .
  REFRESH is_master_data-customers.
  REFRESH lt_customers[].
  REFRESH lt_company[].
  CLEAR ls_customers.
  CLEAR ls_company_data.
  CLEAR ls_address.
  CLEAR ls_company.
  CLEAR is_master_data.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = businesspartner
    IMPORTING
      output = ls_customers-header-object_instance-kunnr.
  CLEAR kna1.
  SELECT SINGLE * FROM kna1 WHERE kunnr = ls_customers-header-object_instance-kunnr.
  ls_customers-header-object_task = 'U'. "Represents Insert or Create
  ls_address-postal-data-name          = kna1-name1. "Name of th
  ls_address-postal-data-country       = kna1-land1.
  ls_address-postal-datax-name         = 'X'.
  ls_address-postal-datax-country      = 'X'.
  ls_address-task                      = 'U'.
  ls_customers-central_data-address = ls_address.
  ls_customers-central_data-central-data-lifnr = ls_customers-header-object_instance-kunnr.
  ls_customers-central_data-central-datax-lifnr = 'X'.
*   Set the DATAX flags
  ls_sales-task = 'I'.
  ls_sales-data_key-vkorg = wa_file-bukrs.
  ls_sales-data_key-vtweg = 'ST'.
  ls_sales-data_key-spart = 'ST'.
  ls_sales-data-bzirk = '000001'.
  ls_sales-data-kdgrp = '01'.
  ls_sales-data-ktgrd = '01'.
  ls_sales-data-waers = wa_file-waers.
  ls_sales-data-konda = '01'.
  ls_sales-data-kalks = '0'.
  ls_sales-data-zterm = wa_file-zterm.
  ls_sales-data-versg = '+'.
*  ls_sales-data-kzazu = wa_file-kzazu.
  ls_sales-data-vsbed = '01'.
  ls_sales-data-kurst = 'M'.
*  ls_sales-data-awahr = wa_file-awahr.
  ls_sales-datax-bzirk = 'X'.
  ls_sales-datax-kdgrp = 'X'.
  ls_sales-datax-vkbur = 'X'.
  ls_sales-datax-vkgrp = 'X'.
  ls_sales-datax-waers = 'X'.
  ls_sales-datax-kurst = 'X'.
  ls_sales-datax-konda = 'X'.
  ls_sales-datax-kalks = 'X'.
  ls_sales-datax-versg = 'X'.
  ls_sales-datax-lprio = 'X'.
  ls_sales-datax-kzazu = 'X'.
  ls_sales-datax-vsbed = 'X'.
  ls_sales-datax-untto = 'X'.
  ls_sales-datax-uebto = 'X'.
  ls_sales-datax-inco1 = 'X'.
  ls_sales-datax-inco2 = 'X'.
  ls_sales-datax-zterm = 'X'.
  ls_sales-datax-kkber = 'X'.
  ls_sales-datax-ktgrd = 'X'.
  ls_sales-datax-pltyp = 'X'.
  ls_sales-datax-vwerk = 'X'.
  ls_sales-datax-podkz = 'X'.
  ls_sales-datax-kvgr1 = 'X'.
  ls_sales-datax-kvgr2 = 'X'.
  ls_sales-datax-kvgr3 = 'X'.
  ls_sales-datax-kvgr4 = 'X'.
  ls_sales-datax-kvgr5 = 'X'.
  ls_sales-datax-kurst = 'X'.
  ls_sales-datax-awahr = 'X'.
  ls_sales-datax-agrel = 'X'.
  ls_sales-datax-bokre = 'X'.
  ls_sales-datax-incov = 'X'.

  ""##################################################################
  DATA iv_ktokd TYPE ktokd. " Customer Account Group
  DATA et_parvw TYPE cmds_parvw_t.
  REFRESH et_parvw.
  REFRESH lt_sales_func.
  CALL METHOD cmd_ei_api_check=>get_mand_partner_functions
    EXPORTING
      iv_ktokd = kna1-ktokd
    IMPORTING
      et_parvw = et_parvw.

  LOOP AT et_parvw INTO DATA(wa_parvw).
    ls_sales_func-task = 'I'.
    ls_sales_func-data_key-parvw = wa_parvw-parvw.
    ls_sales_func-data-partner = kna1-kunnr.
    ls_sales_func-datax-partner = 'X'.
    APPEND ls_sales_func TO lt_sales_func.
    CLEAR ls_sales_func.
  ENDLOOP. " LOOP AT et_parvw INTO DATA(wa_parvw)
  ls_sales-functions-functions = lt_sales_func[].
  APPEND ls_sales TO lt_sales.

  "###########################################################
  ls_tax_data-data-taxkd     = '0'.
***************************************************************
*   Set the Sales Data
  ls_sales_data-sales = lt_sales[].

  SELECT SINGLE kunnr FROM knvv INTO @DATA(l_kunnr) WHERE kunnr = @ls_customers-header-object_instance-kunnr.
  IF sy-subrc <> 0.
    " Adding tax_data

    CLEAR gwa_knvi.
    SELECT SINGLE * FROM knvi INTO gwa_knvi WHERE kunnr = w_log-customer
                                              AND aland = 'IN'
                                              AND tatyp = 'JOCG' .
    IF gwa_knvi IS INITIAL.
      ls_tax_data-task = 'I'.
      ls_tax_data-data_key-aland = 'IN'.
      ls_tax_data-data_key-tatyp = 'JOCG'.
      ls_tax_data-data-taxkd     = '0'.
      ls_tax_data-datax-taxkd    = 'X'.
      APPEND ls_tax_data TO lt_tax_data.
    ENDIF.
    CLEAR gwa_knvi.
    SELECT SINGLE * FROM knvi INTO gwa_knvi WHERE kunnr = w_log-customer
                                              AND aland = 'IN'
                                              AND tatyp = 'JOSG' .

    IF gwa_knvi IS INITIAL.
      " Adding tax_data
      ls_tax_data-task = 'I'.
      ls_tax_data-data_key-aland = 'IN'.
      ls_tax_data-data_key-tatyp = 'JOSG'.
      ls_tax_data-data-taxkd     = '0'.
      ls_tax_data-datax-taxkd    = 'X'.
      APPEND ls_tax_data TO lt_tax_data.
    ENDIF.

    CLEAR gwa_knvi.

    SELECT SINGLE * FROM knvi INTO gwa_knvi WHERE kunnr = w_log-customer
                                              AND aland = 'IN'
                                              AND tatyp = 'JOIG' .

    IF gwa_knvi IS INITIAL.
      " Adding tax_data
      ls_tax_data-task = 'I'.
      ls_tax_data-data_key-aland = 'IN'.
      ls_tax_data-data_key-tatyp = 'JOIG'.
      ls_tax_data-data-taxkd     = '0'.
      ls_tax_data-datax-taxkd    = 'X'.
      APPEND ls_tax_data TO lt_tax_data.
    ENDIF.


    CLEAR gwa_knvi.
    SELECT SINGLE * FROM knvi INTO gwa_knvi WHERE kunnr = w_log-customer
                                              AND aland = 'IN'
                                              AND tatyp = 'JKFC' .

    IF gwa_knvi IS INITIAL.
      " Adding tax_data
      ls_tax_data-task = 'I'.
      ls_tax_data-data_key-aland = 'IN'.
      ls_tax_data-data_key-tatyp = 'JKFC'.
      ls_tax_data-data-taxkd     = '1'.
      ls_tax_data-datax-taxkd    = 'X'.
      APPEND ls_tax_data TO lt_tax_data.
    ENDIF.

    CLEAR gwa_knvi.

    SELECT SINGLE * FROM knvi INTO gwa_knvi WHERE kunnr = w_log-customer
                                              AND aland = 'IN'
                                              AND tatyp = 'JTC1' .

    IF gwa_knvi IS INITIAL.
      " Adding tax_data
      ls_tax_data-task = 'I'.
      ls_tax_data-data_key-aland = 'IN'.
      ls_tax_data-data_key-tatyp = 'JTC1'.
      ls_tax_data-data-taxkd     = '0'.
      ls_tax_data-datax-taxkd    = 'X'.
      APPEND ls_tax_data TO lt_tax_data.
    ENDIF.

    ls_central_data-tax_ind-tax_ind = lt_tax_data.
  ENDIF. " IF sy-subrc <> 0
  ls_customers-central_data = ls_central_data.
  ls_customers-sales_data = ls_sales_data.
  REFRESH: lt_company[].
  CLEAR ls_company.
  ls_company-task                    = 'I'.
  ls_company-data_key-bukrs  = wa_file-bukrs.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = wa_file-akontc
    IMPORTING
      output = ls_company-data-akont.
  ls_company-datax-akont        = 'X'.
  APPEND ls_company TO lt_company.
  ls_company_data-company = lt_company[].
  ls_customers-company_data = ls_company_data.

  APPEND ls_customers TO lt_customers.
  is_master_data-customers = lt_customers[].
  cmd_ei_api=>initialize( ).
  CALL METHOD cmd_ei_api=>maintain_bapi
    EXPORTING
*     IV_TEST_RUN              = SPACE
*     IV_COLLECT_MESSAGES      = SPACE
      is_master_data           = is_master_data
    IMPORTING
      es_master_data_correct   = es_master_data_correct
      es_message_correct       = es_message_correct
      es_master_data_defective = es_master_data_defective
      es_message_defective     = es_message_defective.

  IF es_message_defective-is_error IS INITIAL.
    COMMIT WORK.
    WAIT UP TO 1 SECONDS.
    w_log-bu_partner = businesspartner.
    w_log-bu_partnerx = 'C'.
    CONCATENATE 'Cust. Extended to Sales Area and Cust.Extended to FI Area' w_log-customer INTO w_log-msg SEPARATED BY space.
    w_log-msgtyp = 'S'.
    w_log-msgnr = '001'.
    w_log-uzeit = sy-uzeit.
    w_log-erdat = sy-datum.
    w_log-uname = sy-uname.
    w_log-bpname = kna1-name1.
    APPEND w_log TO t_log.

*    INSERT zbp_upload FROM w_log.
    CLEAR w_log.
  ELSE. " ELSE -> IF es_message_defective-is_error IS INITIAL
    LOOP AT es_message_defective-messages INTO DATA(wa).
      WAIT UP TO 1 SECONDS.
      w_log-bu_partner = businesspartner.
      w_log-bu_partnerx = 'C'.
*        w_log-msg  = wa-message.
      IF w_log-msgtyp = 'S'.
        w_log-msgtyp = wa-type.
        w_log-msgnr = wa-number.
      ENDIF.
      w_log-uzeit = sy-uzeit.
      w_log-erdat = sy-datum.
      w_log-uname = sy-uname.
      w_log-bpname = kna1-name1.
      APPEND w_log TO t_log.
*      INSERT zbp_upload FROM w_log.
      CLEAR w_log.
    ENDLOOP. " LOOP AT es_message_defective-messages INTO DATA(wa)
  ENDIF. " IF es_message_defective-is_error IS INITIAL

ENDFORM.
*&---------------------------------------------------------------------*
*& Form DISPLAY_LOG_CUSTOMER_S
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_log_customer_s .
  CHECK t_log IS NOT INITIAL.
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_grid_title = 'Log'
      is_layout    = s_layout
      it_fieldcat  = t_fcat
    TABLES
      t_outtab     = t_log
* EXCEPTIONS
*     PROGRAM_ERROR                     = 1
*     OTHERS       = 2
    .
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF. " IF sy-subrc <> 0
ENDFORM.
*&---------------------------------------------------------------------*
*& Form MAINTAIN_CUSTOMER_CC
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM maintain_customer_cc .
  DATA is_master_data TYPE cmds_ei_main. " Ext. Interface: Total Customer Data
  DATA es_master_data_correct TYPE cmds_ei_main. " Ext. Interface: Total Customer Data
  DATA es_message_correct TYPE cvis_message. " Error Indicator and System Messages
  DATA es_master_data_defective TYPE cmds_ei_main. " Ext. Interface: Total Customer Data
  DATA es_message_defective TYPE cvis_message. " Error Indicator and System Messages
  DATA: lt_customers    TYPE cmds_ei_extern_t,
        ls_customers    TYPE cmds_ei_extern,         " Complex External Interface for Customers
        ls_address      TYPE cvis_ei_address1,       " Ext. Interface: Address of Organization
        lt_company      TYPE cmds_ei_company_t,
        ls_company      TYPE cmds_ei_company,        " Ext. Interface: Company Code Data
        ls_company_data TYPE cmds_ei_cmd_company,    " Ext. Interface: Company Code Data
        ls_message      TYPE cvis_message,           " Error Indicator and System Messages
        lv_contactid    TYPE bapicontact_01-contact. " Number of contact person
*   Clear the work area initially.
  REFRESH is_master_data-customers.
  REFRESH lt_customers[].
  REFRESH lt_company[].
  CLEAR ls_customers.
  CLEAR ls_company_data.
  CLEAR ls_address.
  CLEAR ls_company.
  CLEAR is_master_data.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = businesspartner
    IMPORTING
      output = ls_customers-header-object_instance-kunnr.
  CLEAR kna1.
  SELECT SINGLE * FROM kna1 WHERE kunnr = ls_customers-header-object_instance-kunnr.
  ls_customers-header-object_task = 'U'.
  ls_address-postal-data-name          = kna1-name1.
  ls_address-postal-data-country       = kna1-land1.
  ls_address-postal-datax-name         = 'X'.
  ls_address-postal-datax-country      = 'X'.
  ls_address-task                      = 'U'.
  ls_customers-central_data-address = ls_address.
*&---------------------------------------------------------------------*
*&  *   Set the Company Code and GL Account
*&---------------------------------------------------------------------*
  REFRESH: lt_company[].
  CLEAR ls_company.
  ls_company-task                    = 'I'.
  ls_company-data_key-bukrs  = wa_file-bukrs.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = wa_file-akontc
    IMPORTING
      output = ls_company-data-akont.
  ls_company-datax-akont        = 'X'.
  APPEND ls_company TO lt_company.
  ls_company_data-company = lt_company[].
  ls_customers-company_data = ls_company_data.
  APPEND ls_customers TO lt_customers.
  is_master_data-customers = lt_customers[].
  cmd_ei_api=>initialize( ).
  CALL METHOD cmd_ei_api=>maintain_bapi
    EXPORTING
      is_master_data           = is_master_data
    IMPORTING
      es_master_data_correct   = es_master_data_correct
      es_message_correct       = es_message_correct
      es_master_data_defective = es_master_data_defective
      es_message_defective     = es_message_defective.

  IF es_message_defective-is_error IS INITIAL.
    COMMIT WORK.
    WAIT UP TO 1 SECONDS.
    w_log-bu_partner = businesspartner.
    w_log-bu_partnerx = 'C'.
    w_log-msg  = 'Customer Extended to Company Code' .
    w_log-msgtyp = 'S'.
    w_log-msgnr = '001'.
    w_log-uzeit = sy-uzeit.
    w_log-erdat = sy-datum.
    w_log-uname = sy-uname.
    w_log-bpname = kna1-name1.
    APPEND w_log TO t_log.
*    INSERT zbp_upload FROM w_log.
    CLEAR w_log.
  ELSE. " ELSE -> IF es_message_defective-is_error IS INITIAL
    LOOP AT es_message_defective-messages INTO DATA(wa).
      w_log-bu_partner = businesspartner.
      w_log-bu_partnerx = 'C'.
      w_log-msg  = wa-message.
      w_log-msgtyp = wa-type.
      w_log-msgnr = wa-number.
      w_log-uzeit = sy-uzeit.
      w_log-erdat = sy-datum.
      w_log-uname = sy-uname.
      w_log-bpname = kna1-name1.
      APPEND w_log TO t_log.
*      INSERT zbp_upload FROM w_log.
      CLEAR w_log.
    ENDLOOP.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form DISPLAY_LOG_vendor_s
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_log_vendor_s .
  CHECK t_log IS NOT INITIAL.
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_grid_title = 'Log'
      is_layout    = s_layout
      it_fieldcat  = t_fcat
    TABLES
      t_outtab     = t_log
* EXCEPTIONS
*     PROGRAM_ERROR                     = 1
*     OTHERS       = 2
    .
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF. " IF sy-subrc <> 0
ENDFORM.

*&---------------------------------------------------------------------*
*& Form UPLOAD_XL_CUSTOMER_CC
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM upload_xl_customer_cc .
ENDFORM.
*&---------------------------------------------------------------------*
*& Form FILL_FCAT_CUSTOMER_CC_LOG
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fill_fcat_customer_cc_log .

ENDFORM.
*&---------------------------------------------------------------------*
*& Form DISPLAY_LOG_CUSTOMER_CC
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_log_customer_cc .
  CHECK t_log IS NOT INITIAL.
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_grid_title = 'Log'
      is_layout    = s_layout
      it_fieldcat  = t_fcat
    TABLES
      t_outtab     = t_log
* EXCEPTIONS
*     PROGRAM_ERROR                     = 1
*     OTHERS       = 2
    .
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF. " IF sy-subrc <> 0
ENDFORM.
*&---------------------------------------------------------------------*
*& Form BDC
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM bdc .
*  b_part = businesspartner.
*  call function 'CONVERSION_EXIT_ALPHA_OUTPUT'
*    exporting
*      input  = b_part
*    importing
*      output = b_part.
*
**READ TABLE it_file INTO wa_file INDEX 1.
*
*  perform bdc_dynpro      using 'SAPLBUS_LOCATOR' '3000'.
*  perform bdc_field       using 'BDC_OKCODE'
*                                '=BUS_MAIN_ENTER'.
**perform bdc_field       using 'BUS_LOCA_SRCH01-SEARCH_TYPE'
**                              wa_file-SEARCH_TYPE_001.
**perform bdc_field       using 'BUS_LOCA_SRCH01-SEARCH_ID'
**                              wa_file-SEARCH_ID_002.
*  perform bdc_field       using 'BUS_JOEL_SEARCH-PARTNER_NUMBER'
*                                 b_part.
*  perform bdc_field       using 'BDC_CURSOR'
*                                'BUS_JOEL_MAIN-CHANGE_NUMBER'.
**perform bdc_field       using 'BUS_JOEL_MAIN-CHANGE_NUMBER'
**                              wa_file-CHANGE_NUMBER_004.
*  perform bdc_dynpro      using 'SAPLBUS_LOCATOR' '3000'.
*  perform bdc_field       using 'BDC_OKCODE'
*                                '=SCREEN_1000_ACTIVITY'.
**perform bdc_field       using 'BUS_LOCA_SRCH01-SEARCH_TYPE'
**                              wa_file-SEARCH_TYPE_005.
**perform bdc_field       using 'BUS_LOCA_SRCH01-SEARCH_ID'
**                              wa_file-SEARCH_ID_006.
*  perform bdc_field       using 'BUS_JOEL_SEARCH-PARTNER_NUMBER'
*                                 b_part.
*  perform bdc_field       using 'BUS_JOEL_MAIN-PARTNER_ROLE'
*                                wa_file-role2.
**perform bdc_field       using 'BUS_JOEL_MAIN-PARTNER_TIMEDEP'
**                              wa_file-PARTNER_TIMEDEP_009.
*  perform bdc_field       using 'BDC_CURSOR'
*                                'BUS000FLDS-TITLE_MEDI'.
*  perform bdc_dynpro      using 'SAPLBUS_LOCATOR' '3000'.
*  perform bdc_field       using 'BDC_OKCODE'
*                                '=SCREEN_1110_CHG_ROLE'.
**perform bdc_field       using 'BUS_LOCA_SRCH01-SEARCH_TYPE'
**                              wa_file-SEARCH_TYPE_010.
**perform bdc_field       using 'BUS_LOCA_SRCH01-SEARCH_ID'
**                              wa_file-SEARCH_ID_011.
*  perform bdc_field       using 'BUS_JOEL_SEARCH-PARTNER_NUMBER'
*                                 b_part.
*  perform bdc_field       using 'BDC_CURSOR'
*                                'BUS_JOEL_MAIN-PARTNER_ROLE'.
*  perform bdc_field       using 'BUS_JOEL_MAIN-PARTNER_ROLE'
*                                wa_file-role2.
**perform bdc_field       using 'BUS_JOEL_MAIN-PARTNER_TIMEDEP'
**                              wa_file-PARTNER_TIMEDEP_014.
**perform bdc_field       using 'BUS000FLDS-TITLE_MEDI'
**                              wa_file-TITLE_MEDI_015.
**perform bdc_field       using 'BUT000-NAME_ORG1'
**                              wa_file-NAME_ORG1_016.
**perform bdc_field       using 'BUS000FLDS-BU_SORT1_TXT'
**                              wa_file-BU_SORT1_TXT_017.
**perform bdc_field       using 'ADDR1_DATA-POST_CODE1'
**                              wa_file-POST_CODE1_018.
**perform bdc_field       using 'ADDR1_DATA-CITY1'
**                              wa_file-CITY1_019.
**perform bdc_field       using 'ADDR1_DATA-COUNTRY'
**                              wa_file-COUNTRY_020.
**perform bdc_field       using 'ADDR1_DATA-REGION'
**                              wa_file-REGION_021.
**perform bdc_field       using 'ADDR1_DATA-TIME_ZONE'
**                              wa_file-TIME_ZONE_022.
**perform bdc_field       using 'ADDR1_DATA-LANGU'
**                              wa_file-LANGU_023.
**perform bdc_field       using 'BUS000FLDS-ADDR_VALID_FROM'
**                              wa_file-ADDR_VALID_FROM_024.
**perform bdc_field       using 'BUS000FLDS-ADDR_VALID_TO'
**                              wa_file-ADDR_VALID_TO_025.
**perform bdc_field       using 'SZA11_0100-TEL_COUNTR'
**                              wa_file-TEL_COUNTR_026.
**perform bdc_field       using 'SZA11_0100-MOB_COUNTR'
**                              wa_file-MOB_COUNTR_027.
**perform bdc_field       using 'SZA11_0100-FAX_COUNTR'
**                              wa_file-FAX_COUNTR_028.
*  perform bdc_dynpro      using 'SAPLBUS_LOCATOR' '3000'.
*  perform bdc_field       using 'BDC_OKCODE'
*                                '=SCREEN_1100_TAB_08'.
**perform bdc_field       using 'BUS_LOCA_SRCH01-SEARCH_TYPE'
**                              wa_file-SEARCH_TYPE_029.
**perform bdc_field       using 'BUS_LOCA_SRCH01-SEARCH_ID'
**                              wa_file-SEARCH_ID_030.
*  perform bdc_field       using 'BUS_JOEL_SEARCH-PARTNER_NUMBER'
*                                 b_part.
*  perform bdc_field       using 'BUS_JOEL_MAIN-PARTNER_ROLE'
*                                wa_file-role2.
**perform bdc_field       using 'BUS_JOEL_MAIN-PARTNER_TIMEDEP'
**                              wa_file-PARTNER_TIMEDEP_033.
*  perform bdc_field       using 'BDC_CURSOR'
*                                'BUS000FLDS-TITLE_MEDI'.
***perform bdc_field       using 'BUS000FLDS-TITLE_MEDI'
***                              wa_file-TITLE_MEDI_034.
**perform bdc_field       using 'BUT000-NAME_ORG1'
**                              wa_file-NAME_ORG1_035.
**perform bdc_field       using 'BUS000FLDS-BU_SORT1_TXT'
**                              wa_file-BU_SORT1_TXT_036.
**perform bdc_field       using 'ADDR1_DATA-POST_CODE1'
**                              wa_file-POST_CODE1_037.
**perform bdc_field       using 'ADDR1_DATA-CITY1'
**                              wa_file-CITY1_038.
**perform bdc_field       using 'ADDR1_DATA-COUNTRY'
**                              wa_file-COUNTRY_039.
**perform bdc_field       using 'ADDR1_DATA-REGION'
**                              wa_file-REGION_040.
**perform bdc_field       using 'ADDR1_DATA-TIME_ZONE'
**                              wa_file-TIME_ZONE_041.
**perform bdc_field       using 'ADDR1_DATA-LANGU'
**                              wa_file-LANGU_042.
**perform bdc_field       using 'BUS000FLDS-ADDR_VALID_FROM'
**                              wa_file-ADDR_VALID_FROM_043.
**perform bdc_field       using 'BUS000FLDS-ADDR_VALID_TO'
**                              wa_file-ADDR_VALID_TO_044.
**perform bdc_field       using 'SZA11_0100-TEL_COUNTR'
**                              wa_file-TEL_COUNTR_045.
**perform bdc_field       using 'SZA11_0100-MOB_COUNTR'
**                              wa_file-MOB_COUNTR_046.
**perform bdc_field       using 'SZA11_0100-FAX_COUNTR'
**                              wa_file-FAX_COUNTR_047.
*  perform bdc_dynpro      using 'SAPLBUS_LOCATOR' '3000'.
*  perform bdc_field       using 'BDC_OKCODE'
*                                '=BUS_MAIN_ENTER'.
**perform bdc_field       using 'BUS_LOCA_SRCH01-SEARCH_TYPE'
**                              wa_file-SEARCH_TYPE_048.
**perform bdc_field       using 'BUS_LOCA_SRCH01-SEARCH_ID'
**                              wa_file-SEARCH_ID_049.
*  perform bdc_field       using 'BUS_JOEL_SEARCH-PARTNER_NUMBER'
*                                b_part." businesspartner.
*  perform bdc_field       using 'BUS_JOEL_MAIN-PARTNER_ROLE'
*                                wa_file-role2.
**perform bdc_field       using 'BUS_JOEL_MAIN-PARTNER_TIMEDEP'
**                              wa_file-PARTNER_TIMEDEP_052.
*  perform bdc_field       using 'BDC_CURSOR'
*                                'GS_KNA1-KTOKD'.
*  perform bdc_field       using 'GS_KNA1-KTOKD'
*                                wa_file-ktokd.
*  perform bdc_dynpro      using 'SAPLBUS_LOCATOR' '3000'.
*  perform bdc_field       using 'BDC_OKCODE'
*                                '=BUS_MAIN_BACK'.
**perform bdc_field       using 'BUS_LOCA_SRCH01-SEARCH_TYPE'
**                              wa_file-SEARCH_TYPE_054.
**perform bdc_field       using 'BUS_LOCA_SRCH01-SEARCH_ID'
**                              wa_file-SEARCH_ID_055.
*  perform bdc_field       using 'BUS_JOEL_SEARCH-PARTNER_NUMBER'
*                                b_part." businesspartner.
*  perform bdc_field       using 'BUS_JOEL_MAIN-PARTNER_ROLE'
*                                wa_file-role2.
**perform bdc_field       using 'BUS_JOEL_MAIN-PARTNER_TIMEDEP'
**                              wa_file-PARTNER_TIMEDEP_058.
*  perform bdc_field       using 'BDC_CURSOR'
*                                'GS_KNA1-KTOKD'.
*  perform bdc_field       using 'GS_KNA1-KTOKD'
*                                wa_file-ktokd.
*  perform bdc_field       using 'BDC_OKCODE'
*                                '=BUS_MAIN_BACK'.
*
*  call transaction 'BP' using bdcdata mode v_mode." UPDATE 'S' MESSAGES INTO gt_messages.
*  refresh bdcdata[].

ENDFORM.

*----------------------------------------------------------------------*
*        Start new screen                                              *
*----------------------------------------------------------------------*
FORM bdc_dynpro USING program dynpro.
  CLEAR bdcdata.
  bdcdata-program  = program.
  bdcdata-dynpro   = dynpro.
  bdcdata-dynbegin = 'X'.
  APPEND bdcdata.
ENDFORM.                    "bdc_dynpro

*----------------------------------------------------------------------*
*        Insert field                                                  *
*----------------------------------------------------------------------*
FORM bdc_field USING fnam fval.
  CLEAR bdcdata.
  bdcdata-fnam = fnam.
  bdcdata-fval = fval.
  CONDENSE bdcdata-fval.
  APPEND bdcdata.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form create_bank_key
*&---------------------------------------------------------------------*
FORM create_bank_key .
  REFRESH bdcdata.

  PERFORM bdc_dynpro      USING 'SAPMF02B' '0100'.
  PERFORM bdc_field       USING 'BDC_CURSOR'
                                'BNKA-BANKL'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '/00'.
  PERFORM bdc_field       USING 'BNKA-BANKS'
                                wa_file-country.
  PERFORM bdc_field       USING 'BNKA-BANKL'
                                wa_file-bank_key.

  PERFORM bdc_dynpro      USING 'SAPMF02B' '0110'.
  PERFORM bdc_field       USING 'BDC_CURSOR'
                                'BNKA-PROVZ'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '/00'.
  PERFORM bdc_field       USING 'BNKA-BANKA'
                                wa_file-bankaccountname.
  PERFORM bdc_field       USING 'BNKA-PROVZ'
                                wa_file-region.

  PERFORM bdc_dynpro      USING 'SAPMF02B' '0110'.
  PERFORM bdc_field       USING 'BDC_CURSOR'
                                'BNKA-BANKA'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '=UPDA'.

  CALL TRANSACTION 'FI01' USING bdcdata MODE 'E'
                          UPDATE 'S'    MESSAGES INTO gt_messages.
  REFRESH: bdcdata.

ENDFORM.
